(include "egglog_src/lakeroad.egg")

; CONSTRUCTING GRAPHS
;
; If we want to create a loop in a design, we use `Wire`
; a temporary placeholder.
;
; Imagine we want to create two subcircuits that feed into
; each other:
; 
;        
;  a     ┌─────┐ b
;  │ ┌───┼─┐   │ │
;┌─▼─▼─┐ │ │ ┌─▼─▼─┐
;│ and │ │ │ │ and │
;└──┬──┘ │ │ └──┬──┘
;   │    │ │    │
;┌──▼──┐ │ │ ┌──▼──┐
;│ reg │ │ │ │ reg │
;└───┬─┘ │ │ └─┬───┘
;    └───┘ └───┘ 
;                
;                
;
; (Note the `reg`s to prevent combinational cycles. Currently,
;  this demo doesn't actually check for combinational cycles!)
;
; First, we create a clock for the registers.
(let clk (Var "clk" 1))
;
; Now, we'll create the first subcircuit (left column).
; The input which will eventually come from the second subcircuit
; will initially be a placeholder, represented by a `Wire`.
(let cyclic-input-0 (Wire "cyclic-input-0" 1))
(let subcircuit-0 
  (Reg 0 clk 
       (Op2 (And) (Var "a" 1) cyclic-input-0)))
;
; Now, subcircuit-0 is an expression representing
; the and-reg circuit, with one of its inputs
; coming from a wire that is not assigned to anything.
; 
; Let's also create the second subcircuit (the right column):
(let cyclic-input-1 (Wire "cyclic-input-1" 1))
(let subcircuit-1 
  (Reg 0 clk 
       (Op2 (And) (Var "b" 1) cyclic-input-1)))
;
; The final thing we need to do is to connect the two sub-circuits
; together, by assigning a value each wire. We can do this
; with `union`:
(union cyclic-input-1 subcircuit-0)
(union cyclic-input-0 subcircuit-1)
;
; Optionally, we can clean up the wires. Their job is done now;
; they made it possible to declare a placeholder input for each
; circuit! Now that the placeholder values are connected,
; the wires are no longer needed.
(delete (Wire "cyclic-input-0" 1))
(delete (Wire "cyclic-input-1" 1))

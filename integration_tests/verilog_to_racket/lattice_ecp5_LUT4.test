RUN: $LAKEROAD_DIR/bin/verilog_to_racket.py \
RUN:   --infile $LAKEROAD_DIR/modules_for_importing/lattice_ecp5/LUT4.v \
RUN:   --top LUT4 \
RUN:   --function-name lattice-ecp5-lut4 \
RUN: | FileCheck %s

CHECK: #lang racket/base
CHECK: (provide lattice-ecp5-lut4)
CHECK: (require (file "/Users/gus/lakeroad/racket/stateful-design-experiment.rkt"))
CHECK: (require rosette)
CHECK: (require racket/hash)
CHECK: (define lattice-ecp5-lut4
CHECK:   (Î» (#:A
CHECK:       (A (bv->signal (constant (list 'A 'symbolic-constant) (bitvector 1))))
CHECK:       #:B
CHECK:       (B (bv->signal (constant (list 'B 'symbolic-constant) (bitvector 1))))
CHECK:       #:C
CHECK:       (C (bv->signal (constant (list 'C 'symbolic-constant) (bitvector 1))))
CHECK:       #:D
CHECK:       (D (bv->signal (constant (list 'D 'symbolic-constant) (bitvector 1))))
CHECK:       #:INIT
CHECK:       (INIT
CHECK:        (bv->signal (constant (list 'INIT 'symbolic-constant) (bitvector 16)))))
CHECK:     (let* ((merged-input-state-hash (hash))
CHECK:            (init-hash (hash))
CHECK:            (btor1 (bitvector 1))
CHECK:            (btor2 A)
CHECK:            (merged-input-state-hash
CHECK:             (hash-union merged-input-state-hash (signal-state A)))
CHECK:            (btor3 B)
CHECK:            (merged-input-state-hash
CHECK:             (hash-union merged-input-state-hash (signal-state B)))
CHECK:            (btor4 C)
CHECK:            (merged-input-state-hash
CHECK:             (hash-union merged-input-state-hash (signal-state C)))
CHECK:            (btor5 D)
CHECK:            (merged-input-state-hash
CHECK:             (hash-union merged-input-state-hash (signal-state D)))
CHECK:            (btor6 (bitvector 16))
CHECK:            (btor7 INIT)
CHECK:            (merged-input-state-hash
CHECK:             (hash-union merged-input-state-hash (signal-state INIT)))
CHECK:            (btor8 (bitvector 8))
CHECK:            (btor9
CHECK:             (signal (extract 7 0 (signal-value btor7)) (signal-state btor7)))
CHECK:            (btor10
CHECK:             (signal (extract 15 8 (signal-value btor7)) (signal-state btor7)))
CHECK:            (btor11 (if (bitvector->bool (signal-value btor5)) btor10 btor9))
CHECK:            (btor12 (bitvector 4))
CHECK:            (btor13
CHECK:             (signal (extract 3 0 (signal-value btor11)) (signal-state btor11)))
CHECK:            (btor14
CHECK:             (signal (extract 7 4 (signal-value btor11)) (signal-state btor11)))
CHECK:            (btor15 (if (bitvector->bool (signal-value btor4)) btor14 btor13))
CHECK:            (btor16 (bitvector 2))
CHECK:            (btor17
CHECK:             (signal (extract 1 0 (signal-value btor15)) (signal-state btor15)))
CHECK:            (btor18
CHECK:             (signal (extract 3 2 (signal-value btor15)) (signal-state btor15)))
CHECK:            (btor19 (if (bitvector->bool (signal-value btor3)) btor18 btor17))
CHECK:            (btor20
CHECK:             (signal (extract 0 0 (signal-value btor19)) (signal-state btor19)))
CHECK:            (btor21
CHECK:             (signal (extract 1 1 (signal-value btor19)) (signal-state btor19)))
CHECK:            (btor22 (if (bitvector->bool (signal-value btor2)) btor21 btor20))
CHECK:            (btor24
CHECK:             (bv->signal
CHECK:              (zero-extend (signal-value btor19) (bitvector 2))
CHECK:              btor19))
CHECK:            (btor25
CHECK:             (bv->signal
CHECK:              (zero-extend (signal-value btor15) (bitvector 4))
CHECK:              btor15))
CHECK:            (btor26
CHECK:             (bv->signal
CHECK:              (zero-extend (signal-value btor11) (bitvector 8))
CHECK:              btor11)))
CHECK:       (make-immutable-hash
CHECK:        (list (cons 'Z (signal (signal-value btor22) (hash))))))))

# Taken from Herbie:
# https://github.com/herbie-fp/herbie/blob/400891fe4c89f0cee051b8e03089a01ab9016f4b/.github/workflows/release.yml
name: Generate Lakeroad release

on:
  push:
    tags:
    - 'v*'
  workflow_dispatch:
  # DO NOT MERGE: we are just including this so that we can test the release
  # while working on the PR.
  pull_request:

jobs:
  build:
    name: Build
    strategy:
      # manual matrix: I think this was an easy way to make (os, os-name) pairs.
      matrix:
        include:
          - os: windows-latest
            os-name: windows
          - os: ubuntu-latest
            os-name: ubuntu
          - os: macos-latest
            os-name: macOS

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Racket
        uses: Bogdanp/setup-racket@v1.11
        with:
          version: 8.11
      
      - name: Set up Racket dependencies
        run: raco pkg install --auto --batch rosette yaml

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' 

      - name: Install Python dependencies
        run: pip install -r requirements.txt && pip install pyinstaller


      - name: Run PyInstaller
        run: pyinstaller --onefile --name lakeroad bin/lakeroad-portfolio.py

      - name: Run `raco exe` on `bin/main.rkt`
        run: raco exe -o lakeroad-single-solver bin/main.rkt

      - name: Create zip (Windows)
        if: matrix.os-name == 'windows'
        run: |
          7z a lakeroad-${{ matrix.os-name }}.zip lakeroad-single-solver.exe
          # TODO(@gussmith23): Get SHA on Windows.
          # sha256sum lakeroad-${{ matrix.os-name }}.zip > lakeroad-${{ matrix.os-name }}.zip.CHECKSUM

      - name: Create zip (Linux, macOS)
        if: matrix.os-name == 'ubuntu' || matrix.os-name == 'macOS'
        run: |
          mkdir lakeroad

          mkdir lakeroad/bin
          cat >lakeroad/bin/lakeroad <<EOF
          #!/bin/bash
          SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
          "$SCRIPT_DIR/../deps/lakeroad/bin/lakeroad" \
            --lakeroad-executable-filepath "$SCRIPT_DIR/../deps/lakeroad/bin/lakeroad-single-solver" \
            --cvc5-path "$SCRIPT_DIR/../deps/cvc5/bin/cvc5" \
            --bitwuzla-path "$SCRIPT_DIR/../deps/bitwuzla/bin/bitwuzla" \
            --stp-path "$SCRIPT_DIR/../deps/stp/bin/stp" \
            --yices-path "$SCRIPT_DIR/../deps/yices/bin/yices" \
            $@
          EOF
          chmod +x lakeroad/bin/lakeroad

          mkdir -p lakeroad/deps/lakeroad/bin
          cp lakeroad-single-solver lakeroad/deps/lakeroad/bin/lakeroad-single-solver
          cp dist/lakeroad lakeroad/deps/lakeroad/bin/lakeroad

          zip -r lakeroad-${{ matrix.os-name }}.zip lakeroad
          # TODO(@gussmith23): Doesn't work on Mac, may need to have one case for each OS.
          # sha256sum lakeroad-${{ matrix.os-name }}.zip > lakeroad-${{ matrix.os-name }}.zip.CHECKSUM

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: lakeroad-${{ matrix.os-name }}.zip
          name: lakeroad-${{ matrix.os-name }}.zip
          if-no-files-found: error

      # TODO(@gussmith23): Re-enable once we generate SHA on Windows.
      # - name: Upload checksum
      #   uses: actions/upload-artifact@v4
      #   with:
      #     path: lakeroad-${{ matrix.os-name }}.zip.CHECKSUM
      #     name: lakeroad-${{ matrix.os-name }}.zip.CHECKSUM
      #     if-no-files-found: error

  release:
    name: Create Initial Release
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Download pre-built artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: lakeroad-*
          merge-multiple: true

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref }}
          name: ${{ github.ref }}
          commit: ${{ github.commit }}
          draft: true
          prerelease: false
          artifactErrorsFailBuild: true
          artifacts: "artifacts/*"

implementations:
  - interface: { name: LUT, parameters: { num_inputs: 2 } }
    modules:
      - module_name: LUT2
        filepath: ../verilator_xilinx/LUT2.v
        parameters: [{ name: INIT, value: INIT }]
        ports:
          [
            { name: I0, direction: input, bitwidth: 1, value: I0 },
            { name: I1, direction: input, bitwidth: 1, value: I1 },
            { name: O, direction: output, bitwidth: 1, value: O },
          ]
    internal_data: { INIT: 4 }
    outputs: { O: O }
  - interface: { name: LUT, parameters: { num_inputs: 6 } }
    modules:
      - module_name: LUT6
        filepath: ../verilator_xilinx/LUT6.v
        racket_import_filepath: ../modules_for_importing/xilinx_ultrascale_plus/LUT6.v
        parameters: [{ name: INIT, value: INIT }]
        ports:
          [
            { name: I0, direction: input, bitwidth: 1, value: I0 },
            { name: I1, direction: input, bitwidth: 1, value: I1 },
            { name: I2, direction: input, bitwidth: 1, value: I2 },
            { name: I3, direction: input, bitwidth: 1, value: I3 },
            { name: I4, direction: input, bitwidth: 1, value: I4 },
            { name: I5, direction: input, bitwidth: 1, value: I5 },
            { name: O, direction: output, bitwidth: 1, value: O },
          ]
    internal_data: { INIT: 64 }
    outputs: { O: O }
  - interface: { name: carry, parameters: { width: 8 } }
    modules:
      - module_name: CARRY8
        filepath: ../verilator_xilinx/CARRY8.v
        racket_import_filepath: ../modules_for_importing/xilinx_ultrascale_plus/CARRY8.v
        ports:
          [
            { name: CI, direction: input, bitwidth: 1, value: CI },
            { name: DI, direction: input, bitwidth: 8, value: DI },
            { name: S, direction: input, bitwidth: 8, value: S },
            { name: CO, direction: output, bitwidth: 8, value: CO },
            { name: O, direction: output, bitwidth: 8, value: O },
          ]
    outputs: { O: O, CO: (bit 7 CO) }
  - interface: { name: DSP, parameters: { width: 16 } }
    internal_data: {
      ACASCREG: 32,
      ADREG: 32,
      ALUMODEREG: 32,
      AREG: 32,
      BCASCREG: 32,
      BREG: 32,
      CARRYINREG: 32,
      CARRYINSELREG: 32,
      CREG: 32,
      DREG: 32,
      INMODEREG: 32,
      MREG: 32,
      OPMODEREG: 32,
      PREG: 32,

      OPMODE: 9,
      A_INPUT: 5,
      B_INPUT: 5,
      PREADDINSEL: 5,
      AMULTSEL: 5,
      BMULTSEL: 5,
      USE_MULT: 5,
      USE_SIMD: 5,
      USE_WIDEXOR: 5,
      XORSIMD: 5,
      AUTORESET_PATDET: 5,
      AUTORESET_PRIORITY: 5,
      SEL_MASK: 5,
      SEL_PATTERN: 5,
      USE_PATTERN_DETECT: 5,
    }
    constraints: {
      # TODO(@acheung8): check if we actually need all these constraints - we might just be able
      # to use the default values in the Verilog? (probably not because multiple bveq arguments are passed)

      # The following are from ultrascale.rkt, interpret-ultrascale-dsp48e2-new:
      ACASCREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32)) (bveq v (bv 2 32))))),
      ADREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      ALUMODEREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      AREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32)) (bveq v (bv 2 32))))),
      BCASCREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32)) (bveq v (bv 2 32))))),
      BREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32)) (bveq v (bv 2 32))))),
      CARRYINREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      CARRYINSELREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      CREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      DREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      INMODEREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      MREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      OPMODEREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      PREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),

      A_INPUT: (lambda (v) (assert (|| (bveq v (bv 7 5)) (bveq v (bv 15 5))))),
      B_INPUT: (lambda (v) (assert (|| (bveq v (bv 7 5)) (bveq v (bv 15 5))))),
      PREADDINSEL: (lambda (v) (assert (|| (bveq v (bv 0 5)) (bveq v (bv 1 5))))),
      AMULTSEL: (lambda (v) (assert (|| (bveq v (bv 0 5)) (bveq v (bv 2 5))))),
      BMULTSEL: (lambda (v) (assert (|| (bveq v (bv 1 5)) (bveq v (bv 2 5))))),
      USE_MULT: (lambda (v) (assert (|| (bveq v (bv 20 5)) (bveq v (bv 10 5)) (bveq v (bv 18 5))))),
      USE_SIMD: (lambda (v) (assert (|| (bveq v (bv 12 5)) (bveq v (bv 25 5)) (bveq v (bv 19 5))))),
      USE_WIDEXOR: (lambda (v) (assert (|| (bveq v (bv 24 5)) (bveq v (bv 13 5))))),
      XORSIMD: (lambda (v) (assert (|| (bveq v (bv 26 5)) (bveq v (bv 14 5))))),
      AUTORESET_PATDET: (lambda (v) (assert (|| (bveq v (bv 3 5)) (bveq v (bv 4 5)) (bveq v (bv 5 5))))),
      AUTORESET_PRIORITY: (lambda (v) (assert (|| (bveq v (bv 6 5)) (bveq v (bv 16 5))))),
      SEL_MASK: (lambda (v) (assert (|| (bveq v (bv 8 5)) (bveq v (bv 17 5)) (bveq v (bv 22 5)) (bveq v (bv 23 5))))),
      SEL_PATTERN: (lambda (v) (assert (|| (bveq v (bv 9 5)) (bveq v (bv 17 5))))),
      USE_PATTERN_DETECT: (lambda (v) (assert (|| (bveq v (bv 11 5)) (bveq v (bv 21 5))))),
      # Here, I want to apply this assertion but it's unclear how I can apply it
      # without a reference to both OPMODE and IS_OPMODE_INVERTED.
      # ;;; Table 2-4 of DSP manual.
      # (assert (=> (bveq (bvxor (extract 1 0 OPMODE) (extract 1 0 IS_OPMODE_INVERTED)) (bv #b01 2))
      #             (bveq (bvxor (extract 3 2 OPMODE) (extract 3 2 IS_OPMODE_INVERTED)) (bv #b01 2))))
      # ;;; Table 2-6 of DSP manual.
      # (assert (not (bveq (bvxor (extract 6 4 OPMODE) (extract 6 4 IS_OPMODE_INVERTED)) (bv #b111 3))))
      # ;;; Warning from DSP model:
      # ;;;
      # ;;; DRC warning : [Unisim DSP48E2-11] CARRYINSEL is set to 010 with OPMODEREG set to 0. This causes
      # ;;; unknown values after reset occurs. It is suggested to use OPMODEREG = 1 when cascading large
      # ;;; adders.
      # (assert (not (&& (bveq CARRYINSEL (bv #b010 3)) (bvzero? OPMODEREG))))

      # The following are from synthesize.rkt, synthesize-xilinx-ultrascale-plus-dsp
    }
    modules:
      - module_name: DSP48E2
        filepath: ../verilator_unisims/DSP48E2.v
        racket_import_filepath: ../modules_for_importing/xilinx_ultrascale_plus/DSP48E2.v
        ports:
          [
            { name: A, direction: input, bitwidth: 16, value: (zero-extend A (bitvector 30)) },
            { name: ACIN, direction: input, bitwidth: 30, value: (bv 0 30) },
            { name: ALUMODE, direction: input, bitwidth: 4, value: (bv 0 4) },
            { name: B, direction: input, bitwidth: 16, value: (zero-extend B (bitvector 18)) },
            { name: BCIN, direction: input, bitwidth: 18, value: (bv 0 18) },
            { name: C, direction: input, bitwidth: 48, value: (bv 0 48) },
            { name: CARRYCASCIN, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: CARRYIN, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: CARRYINSEL, direction : input, bitwidth: 3, value: (bv 0 3) },

            # Here, we set clock enable inputs to 1.
            { name: CEA1, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEA2, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEAD, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEALUMODE, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEB1, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEB2, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CECARRYIN, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CECTRL, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CED, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEINMODE, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEM, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEP, direction: input, bitwidth: 1, value: (bv 1 1) },

            { name: CLK, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: D, direction: input, bitwidth: 27, value: (bv 0 27) },
            { name: INMODE, direction: input, bitwidth: 5, value: (bv 0 5) },
            { name: MULTSIGNIN, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: OPMODE, direction: input, bitwidth: 9, value: OPMODE },
            { name: PCIN, direction: input, bitwidth: 48, value: (bv 0 48) },
            { name: RSTA, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTALLCARRYIN, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTALUMODE, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTB, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTC, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTCTRL, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTD, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTINMODE, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTM, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTP, direction: input, bitwidth: 1, value: (bv 0 1) },

            { name: P, direction: output, bitwidth: 48, value: P },
          ]
        parameters: [
          { name: ACASCREG, value: ACASCREG },
          { name: ADREG, value: ADREG },
          { name: ALUMODEREG, value: ALUMODEREG },
          { name: AMULTSEL, value: AMULTSEL },
          { name: AREG, value: AREG },
          { name: AUTORESET_PATDET, value: AUTORESET_PATDET },
          { name: AUTORESET_PRIORITY, value: AUTORESET_PRIORITY },
          { name: A_INPUT, value: A_INPUT },
          { name: BCASCREG, value: BCASCREG },
          { name: BMULTSEL, value: BMULTSEL },
          { name: BREG, value: BREG },
          { name: B_INPUT, value: B_INPUT },
          { name: CARRYINREG, value: CARRYINREG },
          { name: CARRYINSELREG, value: CARRYINSELREG },
          { name: CREG, value: CREG },
          { name: DREG, value: DREG },
          { name: INMODEREG, value: INMODEREG },
          { name: IS_ALUMODE_INVERTED, value: (bv 0 4) },
          { name: IS_CARRYIN_INVERTED, value: (bv 0 1) },
          { name: IS_CLK_INVERTED, value: (bv 0 1) },
          { name: IS_INMODE_INVERTED, value: (bv 0 5) },
          { name: IS_OPMODE_INVERTED, value: (bv 0 9) },
          { name: IS_RSTALLCARRYIN_INVERTED, value: (bv 0 1) },
          { name: IS_RSTALUMODE_INVERTED, value: (bv 0 1) },
          { name: IS_RSTA_INVERTED, value: (bv 0 1) },
          { name: IS_RSTB_INVERTED, value: (bv 0 1) },
          { name: IS_RSTCTRL_INVERTED, value: (bv 0 1) },
          { name: IS_RSTC_INVERTED, value: (bv 0 1) },
          { name: IS_RSTD_INVERTED, value: (bv 0 1) },
          { name: IS_RSTINMODE_INVERTED, value: (bv 0 1) },
          { name: IS_RSTM_INVERTED, value: (bv 0 1) },
          { name: IS_RSTP_INVERTED, value: (bv 0 1) },
          { name: MASK, value: (bv 0 48) },
          { name: MREG, value: MREG },
          { name: OPMODEREG, value: OPMODEREG },
          { name: PATTERN, value: (bv 0 48) },
          { name: PREADDINSEL, value: PREADDINSEL },
          { name: PREG, value: PREG },
          { name: RND, value: (bv 0 48) },
          { name: SEL_MASK, value: SEL_MASK },
          { name: SEL_PATTERN, value: SEL_PATTERN },
          { name: USE_MULT, value: USE_MULT },
          { name: USE_PATTERN_DETECT, value: USE_PATTERN_DETECT },
          { name: USE_SIMD, value: USE_SIMD },
          { name: USE_WIDEXOR, value: USE_WIDEXOR },
          { name: XORSIMD, value: XORSIMD },
        ]
    outputs: { O : (extract 15 0 P) }
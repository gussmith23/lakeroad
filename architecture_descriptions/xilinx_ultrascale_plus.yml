implementations:
  - interface: { name: LUT, parameters: { num_inputs: 2 } }
    modules:
      - module_name: LUT2
        instance_name: LUT2
        filepath: ../verilog/simulation/xilinx-ultrascale-plus/LUT2.v
        parameters: [{ name: INIT, value: INIT }]
        ports:
          [
            { name: I0, direction: input, bitwidth: 1, value: I0 },
            { name: I1, direction: input, bitwidth: 1, value: I1 },
            { name: O, direction: output, bitwidth: 1, value: O },
          ]
    internal_data: { INIT: 4 }
    outputs: { O: (get LUT2 O) }
  - interface: { name: LUT, parameters: { num_inputs: 6 } }
    modules:
      - module_name: LUT6
        instance_name: LUT6
        filepath: ../verilog/simulation/xilinx-ultrascale-plus/LUT6.v
        racket_import_filepath: ../modules_for_importing/xilinx_ultrascale_plus/LUT6.v
        parameters: [{ name: INIT, value: INIT }]
        ports:
          [
            { name: I0, direction: input, bitwidth: 1, value: I0 },
            { name: I1, direction: input, bitwidth: 1, value: I1 },
            { name: I2, direction: input, bitwidth: 1, value: I2 },
            { name: I3, direction: input, bitwidth: 1, value: I3 },
            { name: I4, direction: input, bitwidth: 1, value: I4 },
            { name: I5, direction: input, bitwidth: 1, value: I5 },
            { name: O, direction: output, bitwidth: 1, value: O },
          ]
    internal_data: { INIT: 64 }
    outputs: { O: (get LUT6 O) }
  - interface: { name: carry, parameters: { width: 8 } }
    modules:
      - module_name: CARRY8
        instance_name: CARRY8
        filepath: ../verilog/simulation/xilinx-ultrascale-plus/CARRY8.v
        racket_import_filepath: ../modules_for_importing/xilinx_ultrascale_plus/CARRY8.v
        ports:
          [
            { name: CI, direction: input, bitwidth: 1, value: CI },
            { name: DI, direction: input, bitwidth: 8, value: DI },
            { name: S, direction: input, bitwidth: 8, value: S },
            { name: CO, direction: output, bitwidth: 8, value: CO },
            { name: O, direction: output, bitwidth: 8, value: O },
            { name: CI_TOP, direction: input, bitwidth: 1, value: (bv 0 1) },
          ]
        parameters:
          [
            # CARRY_TYPE = "SINGLE"; second carry-in for "DUAL" mode set to 0 above.
            { name: CARRY_TYPE, value: (bv 0 1) },
          ]
    outputs: { O: (get CARRY8 O), CO: (bit 7 (get CARRY8 CO)) }
  - interface: { name: DSP, parameters: { out-width: 48, a-width: 30, b-width: 18, c-width: 48, d-width: 27 } }
    internal_data: {
      # ACASCREG: 32,
      ADREG: 1,
      ALUMODEREG: 1,
      AREG: 2,
      # BCASCREG: 32,
      BREG: 2,
      # CARRYINREG: 1,
      CARRYINSELREG: 1,
      CREG: 1,
      DREG: 1,
      INMODEREG: 1,
      MREG: 1,
      OPMODEREG: 1,
      PREG: 1,

      OPMODE: 9,
      IS_OPMODE_INVERTED: 9,
      # A_INPUT: 5,
      # B_INPUT: 5,
      # PREADDINSEL: 5,
      AMULTSEL: 5,
      BMULTSEL: 5,
      CARRYINSEL: 3,
      # USE_MULT: 5,
      # USE_SIMD: 5,
      # USE_WIDEXOR: 5,
      XORSIMD: 5,
      AUTORESET_PATDET: 5,
      # AUTORESET_PRIORITY: 5,
      SEL_MASK: 5,
      # SEL_PATTERN: 5,
      # USE_PATTERN_DETECT: 5,

      ALUMODE: 4,
      INMODE: 5,
    }
    constraints: [
      # TODO(@ninehusky): Right now, these constraints are commented out because we fix these parameters to specific values.
      # When we extend the DSP primitive interface to support sequential functionality, we'll need to
      # re-enable these constraints (and fix the parameter values accordingly).
      # We will also need to convert these from lambdas to just the predicate that go inside an assert.

      # The following are from ultrascale.rkt, interpret-ultrascale-dsp48e2-new:
      # Commented out ones are unnecessary based on (assert bvzero?...)
      # asserts present in synthesize.rkt/interpret-ultrascale-dsp48e2-new.
      # ACASCREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32)) (bveq v (bv 2 32))))),
      # ADREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      # ALUMODEREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      # BCASCREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32)) (bveq v (bv 2 32))))),
      # CARRYINREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      # CARRYINSELREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      # CREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      # DREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      # INMODEREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      # MREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),
      # OPMODEREG: (lambda (v) (assert (|| (bveq v (bv 0 32)) (bveq v (bv 1 32))))),

      # "(|| (bveq ACASCREG (bv 0 32)) (bveq ACASCREG (bv 1 32)) (bveq ACASCREG (bv 2 32)))",
      # "(|| (bveq BCASCREG (bv 0 32)) (bveq BCASCREG (bv 1 32)) (bveq BCASCREG (bv 2 32)))",
      "(not (bveq AREG (bv 3 2)))",
      "(not (bveq BREG (bv 3 2)))",
      # "(|| (bveq PREG (bv 0 32)) (bveq PREG (bv 1 32)))",
      # "(|| (bveq ADREG (bv 0 32)) (bveq ADREG (bv 1 32)))",
      # "(|| (bveq ALUMODEREG (bv 0 32)) (bveq ALUMODEREG (bv 1 32)))",
      # "(|| (bveq CARRYINREG (bv 0 32)) (bveq CARRYINREG (bv 1 32)))",
      # "(|| (bveq CREG (bv 0 32)) (bveq CREG (bv 1 32)))",
      # "(|| (bveq DREG (bv 0 32)) (bveq DREG (bv 1 32)))",
      # "(|| (bveq MREG (bv 0 32)) (bveq MREG (bv 1 32)))",
      # "(|| (bveq OPMODEREG (bv 0 32)) (bveq OPMODEREG (bv 1 32)))",
      # "(|| (bveq INMODEREG (bv 0 32)) (bveq INMODEREG (bv 1 32)))",
      # "(|| (bveq CARRYINSELREG (bv 0 32)) (bveq CARRYINSELREG (bv 1 32)))",

      # "(|| (bveq A_INPUT (bv 7 5)) (bveq A_INPUT (bv 15 5)))",
      # "(|| (bveq B_INPUT (bv 7 5)) (bveq B_INPUT (bv 15 5)))",
      # "(|| (bveq PREADDINSEL (bv 0 5)) (bveq PREADDINSEL (bv 1 5)))",
      # "(|| (bveq AMULTSEL (bv 0 5)) (bveq AMULTSEL (bv 2 5)))",
      # "(|| (bveq BMULTSEL (bv 1 5)) (bveq BMULTSEL (bv 2 5)))",
      # "(|| (bveq USE_MULT (bv 20 5)) (bveq USE_MULT (bv 10 5)) (bveq USE_MULT (bv 18 5)))",
      # "(|| (bveq USE_SIMD (bv 12 5)) (bveq USE_SIMD (bv 25 5)) (bveq USE_SIMD (bv 19 5)))",
      # "(|| (bveq USE_WIDEXOR (bv 24 5)) (bveq USE_WIDEXOR (bv 13 5)))",
      # "(|| (bveq XORSIMD (bv 26 5)) (bveq XORSIMD (bv 14 5)))",
      # "(|| (bveq AUTORESET_PATDET (bv 3 5)) (bveq AUTORESET_PATDET (bv 4 5)) (bveq AUTORESET_PATDET (bv 5 5)))",
      # "(|| (bveq AUTORESET_PRIORITY (bv 6 5)) (bveq AUTORESET_PRIORITY (bv 16 5)))",
      # "(|| (bveq SEL_MASK (bv 8 5)) (bveq SEL_MASK (bv 17 5)) (bveq SEL_MASK (bv 22 5)) (bveq SEL_MASK (bv 23 5)))",
      # "(|| (bveq SEL_PATTERN (bv 9 5)) (bveq SEL_PATTERN (bv 17 5)) (bveq SEL_PATTERN (bv 22 5)) (bveq SEL_PATTERN (bv 23 5)))",
      # "(|| (bveq USE_PATTERN_DETECT (bv 11 5)) (bveq USE_PATTERN_DETECT (bv 21 5)))",

      "(=> (bveq (bvxor (extract 1 0 OPMODE) (extract 1 0 IS_OPMODE_INVERTED)) (bv #b01 2))
                  (bveq (bvxor (extract 3 2 OPMODE) (extract 3 2 IS_OPMODE_INVERTED)) (bv #b01 2)))",
      "(not (bveq (bvxor (extract 6 4 OPMODE) (extract 6 4 IS_OPMODE_INVERTED)) (bv #b111 3)))",
      # Warning from DSP model:
      # 
      # DRC warning : [Unisim DSP48E2-11] CARRYINSEL is set to 010 with OPMODEREG set to 0. This causes
      # unknown values after reset occurs. It is suggested to use OPMODEREG = 1 when cascading large
      # adders.
      "(not (&& (bveq CARRYINSEL (bv #b010 3)) (bvzero? OPMODEREG)))",
      
      # DRC warning : [Unisim DSP48E2-10] CARRYINSEL is set to 010 with OPMODE
      # set to multiplication (xxx0101). This is an illegal mode and may show
      # deviation between simulation results and hardware behavior.
      "(not (&& (bveq CARRYINSEL (bv #b010 3)) (bveq (extract 3 0 OPMODE) (bv #b0101 4))))",


      # ERROR: [DRC DSPS-2] Invalid PCIN Connection for OPMODE value: DSP48E2 cell DSP48E2_0 has
      # OPMODE[5:4] set to 01 which uses the input of the PCIN bus for its computation, however the
      # PCIN input is not properly connected to another DSP48E2 Block.  Please either correct the
      # connectivity or OPMODE value to allow for proper implementation.
      #
      # TODO(@gussmith23): deal with this when we support multiple DSPs.
      "(not (bveq (extract 5 4 OPMODE) (bv #b01 2)))",

      # ERROR: [DRC DSPS-4] Invalid PCIN Connection for CARRYINSEL value: DSP48E2 cell DSP48E2_0
      # has CARRYINSEL[2:0] set to 011 which uses the input of the PCIN bus for its computation,
      # however the PCIN input is not properly connected to another DSP48E2 Block.  Please either
      # correct the connectivity or CARRYINSEL value to allow for proper implementation.
      #
      # TODO(@gussmith23): deal with this when we support multiple DSPs.
      "(not (bveq (extract 2 0 CARRYINSEL) (bv #b011 3)))",

      # Error: [Unisim DSP48E2-2] AREG attribute is set to     and ACASCREG
      # attribute is set to     . When AREG is 0 or 1, ACASCREG must be set to
      # the same value.
      # "(=> (|| (bveq AREG (bv 0 32)) (bveq AREG (bv 1 32))) (bveq ACASCREG AREG))",
      # Error: [Unisim DSP48E2-3] AREG attribute is set to     and ACASCREG
      # attribute is set to     . When AREG is 2, ACASCREG must be set to 1 or
      # 2.
      # "(=> (bveq AREG (bv 2 32)) (|| (bveq ACASCREG (bv 1 32)) (bveq ACASCREG (bv 2 32))))",
      # Given that we don't use the cascade paths, it's easier to just set
      # ACASCREG to AREG.
      # Note: We set this below rather than using a constraint.
      # "(bveq ACASCREG AREG)",

      # Error: [Unisim DSP48E2-4] BREG attribute is set to     and BCASCREG
      # attribute is set to     . When BREG is 0 or 1, BCASCREG must be set to
      # the same value.
      #"(=> (|| (bveq BREG (bv 0 32)) (bveq BREG (bv 1 32))) (bveq BCASCREG BREG))",
      # See above; same with breg.
      # Note: We set this below rather than using a constraint.
      # "(bveq BCASCREG BREG)",

      # Exclude RND or P feedback loop as settings of wmux.
      # "(not (bveq (extract 8 7 OPMODE) (bv 2 2)))",
      # "(not (bveq (extract 8 7 OPMODE) (bv 1 2)))",

      # Exclude P feedback loop as setting of xmux.
      # "(not (bveq (extract 1 0 OPMODE) (bv 2 2)))",

      # I can't tell if these do more harm or good. I'm getting a bit in the
      # weeds with solver optimization.
      # # Exclude P feedback, PCIN, shifted PCIN/P feedback, and illegal selection (111) from Z mux.
      # "(not (bveq (extract 6 4 OPMODE) (bv 1 3)))",
      # # Seems like some tests may actually depend on these...
      # # "(not (bveq (extract 6 4 OPMODE) (bv 2 3)))",
      # # "(not (bveq (extract 6 4 OPMODE) (bv 4 3)))",
      # "(not (bveq (extract 6 4 OPMODE) (bv 5 3)))",
      # "(not (bveq (extract 6 4 OPMODE) (bv 6 3)))",
      # "(not (bveq (extract 6 4 OPMODE) (bv 7 3)))",
    ]
    modules:
      - module_name: DSP48E2
        instance_name: DSP48E2
        filepath: ../verilog/simulation/xilinx-ultrascale-plus/DSP48E2.v
        racket_import_filepath: ../modules_for_importing/xilinx_ultrascale_plus/DSP48E2.v
        ports:
          [
            { name: A, direction: input, bitwidth: 30, value: A },
            { name: ACIN, direction: input, bitwidth: 30, value: (bv 0 30) },
            { name: ALUMODE, direction: input, bitwidth: 4, value: ALUMODE },
            { name: B, direction: input, bitwidth: 18, value: B },
            { name: BCIN, direction: input, bitwidth: 18, value: (bv 0 18) },
            { name: C, direction: input, bitwidth: 48, value: C },
            # TODO(@gussmith23) This could allow users to define invalid DSP
            #   configurations, wrt to Xilinx place and route, specifically
            #   CARRYIN must come from a constant or another DSP's CARRYOUT
            { name: CARRYCASCIN, direction: input, bitwidth: 1, value: CARRYIN},
            { name: CARRYIN, direction: input, bitwidth: 1, value: (bv 0 1)},
            { name: CARRYINSEL, direction : input, bitwidth: 3, value: CARRYINSEL },

            # Here, we set clock enable inputs to 1.
            { name: CEA1, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEA2, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEAD, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEALUMODE, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEB1, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEB2, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEC, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CECARRYIN, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CECTRL, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CED, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEINMODE, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEM, direction: input, bitwidth: 1, value: (bv 1 1) },
            { name: CEP, direction: input, bitwidth: 1, value: (bv 1 1) },

            { name: CLK, direction: input, bitwidth: 1, value: clk },
            { name: D, direction: input, bitwidth: 27, value: (choose D (extract 26 0 C)) },
            { name: INMODE, direction: input, bitwidth: 5, value: INMODE },
            { name: MULTSIGNIN, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: OPMODE, direction: input, bitwidth: 9, value: OPMODE },
            { name: PCIN, direction: input, bitwidth: 48, value: (bv 0 48) },
            { name: RSTA, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTALLCARRYIN, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTALUMODE, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTB, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTC, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTCTRL, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTD, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTINMODE, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTM, direction: input, bitwidth: 1, value: (bv 0 1) },
            { name: RSTP, direction: input, bitwidth: 1, value: (bv 0 1) },

            { name: P, direction: output, bitwidth: 48, value: unused },
            { name: CARRYOUT, direction: output, bitwidth: 1, value: unused },
            { name: CARRYCASCOUT, direction: output, bitwidth: 1, value: unused }
          ]
        parameters: [
          # Set to AREG given that we don't use cascade paths.
          { name: ACASCREG, value: (zero-extend AREG (bitvector 32)) },
          { name: ADREG, value: (zero-extend ADREG (bitvector 32)) },
          { name: ALUMODEREG, value: (zero-extend ALUMODEREG (bitvector 32)) },
          { name: AMULTSEL, value: (choose (bv 0 5) (bv 2 5)) },
          { name: AREG, value: (zero-extend AREG (bitvector 32))},
          # NO_RESET
          { name: AUTORESET_PATDET, value: (bv 3 5) },
          # RESET
          { name: AUTORESET_PRIORITY, value: (bv 6 5) },
          # Direct
          { name: A_INPUT, value: (bv 7 5) },
          # Set to BREG given that we don't use cascade paths.
          { name: BCASCREG, value: (zero-extend BREG (bitvector 32)) },
          { name: BMULTSEL, value: (choose (bv 1 5) (bv 2 5)) },
          { name: BREG, value: (zero-extend BREG (bitvector 32)) },
          # Direct
          { name: B_INPUT, value: (bv 7 5) },
          { name: CARRYINREG, value: (bv 0 32) },
          { name: CARRYINSELREG, value: (zero-extend CARRYINSELREG (bitvector 32)) },
          { name: CREG, value: (zero-extend CREG (bitvector 32)) },
          { name: DREG, value: (zero-extend DREG (bitvector 32)) },
          { name: INMODEREG, value: (zero-extend INMODEREG (bitvector 32)) },
          { name: IS_ALUMODE_INVERTED, value: (bv 0 4) },
          { name: IS_CARRYIN_INVERTED, value: (bv 0 1) },
          { name: IS_CLK_INVERTED, value: (bv 0 1) },
          { name: IS_INMODE_INVERTED, value: (bv 0 5) },
          { name: IS_OPMODE_INVERTED, value: (bv 0 9) },
          { name: IS_RSTALLCARRYIN_INVERTED, value: (bv 0 1) },
          { name: IS_RSTALUMODE_INVERTED, value: (bv 0 1) },
          { name: IS_RSTA_INVERTED, value: (bv 0 1) },
          { name: IS_RSTB_INVERTED, value: (bv 0 1) },
          { name: IS_RSTCTRL_INVERTED, value: (bv 0 1) },
          { name: IS_RSTC_INVERTED, value: (bv 0 1) },
          { name: IS_RSTD_INVERTED, value: (bv 0 1) },
          { name: IS_RSTINMODE_INVERTED, value: (bv 0 1) },
          { name: IS_RSTM_INVERTED, value: (bv 0 1) },
          { name: IS_RSTP_INVERTED, value: (bv 0 1) },
          { name: MASK, value: (bv 0 48) },
          { name: MREG, value: (zero-extend MREG (bitvector 32)) },
          { name: OPMODEREG, value: (zero-extend OPMODEREG (bitvector 32)) },
          { name: PATTERN, value: (bv 0 48) },
          # A
          { name: PREADDINSEL, value: (bv 0 5) },
          { name: PREG, value: (zero-extend PREG (bitvector 32)) },
          { name: RND, value: (bv 0 48) },
          # MASK
          { name: SEL_MASK, value: (bv 8 5) },
          # PATTERN
          { name: SEL_PATTERN, value: (bv 9 5) },
          # MULTIPLY
          { name: USE_MULT, value: (bv 10 5) },
          # NO_PATDET
          { name: USE_PATTERN_DETECT, value: (bv 11 5) },
          # ONE48
          { name: USE_SIMD, value: (bv 12 5) },
          # Set to false
          { name: USE_WIDEXOR, value: (bv 13 5) },
          # Set to XOR12
          { name: XORSIMD, value: (bv 26 5) },
        ]
    outputs: { O : (get DSP48E2 P), CARRYOUT: (get DSP48E2 CARRYCASCOUT)}
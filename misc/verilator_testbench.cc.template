// Testbench file which tests two Verilated designs against each other: a
// ground-truth design and a design under test.

#include <stdio.h>
#include <cassert>
#include "verilated.h"
#include "{test_module_header_filepath}"
#include "{ground_truth_module_header_filepath}"
#include <inttypes.h>

// User must provide the implementations of these macros. In Python, it likely
// looks something like:
// ```python
// " ".join(
//        [f"module->{{name}}=input[{{i}}];" for i, (name, _) in enumerate(module_inputs)]
//    )
// ```
// (and similarly for clock signal)
//
// This currently assumes that the input signals and clock signals have the same
// name. This isn't necessarily the case.
#define SET_MODULE_INPUTS(module, inputs) {set_module_inputs_body}
#define SET_MODULE_CLOCK(module, clock) {set_module_clock_body}

#define NUM_INPUTS {num_inputs}
#define INITIATION_INTERVAL {initiation_interval}

int main(int argc, char** argv) {{

  srand({seed});

  int num_module_args, num_test_cases;
  assert(scanf("%d %d\n", &num_module_args, &num_test_cases) == 2);

  uint64_t inputs[NUM_INPUTS];

  for (int test_case_i = 0; test_case_i < num_test_cases; test_case_i++) {{
    
    VerilatedContext* contextp_test = new VerilatedContext;
    VerilatedContext* contextp_ground_truth = new VerilatedContext;
    Vtest_module* test_module = new Vtest_module{{contextp_test}};
    Vground_truth_module* ground_truth_module = new Vground_truth_module{{contextp_ground_truth}};
    //contextp->commandArgs(argc, argv);


    // Parse inputs from command line.
    printf("inputs:");
    for (int i = 0; i < NUM_INPUTS; i++) {{
      assert(scanf("%" SCNu64, &inputs[i]) == 1);
      printf(" %" PRIu64, inputs[i]);
    }}
    printf("\n");

#if INITIATION_INTERVAL == 0
    SET_MODULE_INPUTS(test_module, inputs)
    test_module->eval();
    SET_MODULE_INPUTS(ground_truth_module, inputs)
    ground_truth_module->eval();
#else
    // CLOCK CYCLE 1

    // First half of clock cycle 1: clk=0, inputs=desired inputs.
    SET_MODULE_INPUTS(test_module, inputs)
    SET_MODULE_CLOCK(test_module, 0)
    SET_MODULE_INPUTS(ground_truth_module, inputs)
    SET_MODULE_CLOCK(ground_truth_module, 0)

    test_module->eval();
    ground_truth_module->eval();

    // Second half of clock cycle 1: clk=1, inputs=random values/0.
    if ({use_random_intermediate_inputs} == true) {{
      for (int i = 0; i < NUM_INPUTS; i++) {{
        inputs[i] = rand();
      }}
    }} else {{
      for (int i = 0; i < NUM_INPUTS; i++) {{
        inputs[i] = 0;
      }}
    }}

    SET_MODULE_CLOCK(test_module, 1)
    SET_MODULE_CLOCK(ground_truth_module, 1)
    
    test_module->eval();
    ground_truth_module->eval();
    
    // CLOCK CYCLE N>1


    for (int clock_cycle_i = 1; clock_cycle_i < INITIATION_INTERVAL; clock_cycle_i++) {{

        // Either zero out inputs or use random inputs.
      if ({use_random_intermediate_inputs} == true) {{
        for (int i = 0; i < NUM_INPUTS; i++) {{
          inputs[i] = rand();
        }}
      }} else {{
        for (int i = 0; i < NUM_INPUTS; i++) {{
          inputs[i] = 0;
        }}
      }}

      SET_MODULE_INPUTS(test_module, inputs)
      SET_MODULE_INPUTS(ground_truth_module, inputs)
      SET_MODULE_CLOCK(test_module, 0)
      SET_MODULE_CLOCK(ground_truth_module, 0)

      test_module->eval();
      ground_truth_module->eval();
      
      SET_MODULE_INPUTS(test_module, inputs)
      SET_MODULE_INPUTS(ground_truth_module, inputs)
      SET_MODULE_CLOCK(test_module, 1)
      SET_MODULE_CLOCK(ground_truth_module, 1)
      
      test_module->eval();
      ground_truth_module->eval();
      
    }}
#endif

  printf("actual, expected = %lu, %lu\n", test_module->{output_signal}, ground_truth_module->{output_signal});
  assert(test_module->{output_signal} == ground_truth_module->{output_signal});

  delete ground_truth_module;
  delete test_module;
  delete contextp_test;
  delete contextp_ground_truth;

  }}

}}
module testbench;

{input_output_declarations}

integer num_inputs;
integer num_test_cases;
logic [{max_input_bitwidth}-1:0] inputs[];

{test_module_name} simulate_with_verilator_test_module({test_module_port_list});
{ground_truth_module_name} simulate_with_verilator_ground_truth_module({ground_truth_module_port_list});

localparam CLK_PERIOD = 10;
localparam STDIN = 32'h8000_0000;

// Tracks whether the outputs have been all zeroes. This is a common failure
// mode when tests aren't set up correctly; for example, if we have the wrong
// initiation interval.
logic seen_a_one = 1'b0;

initial begin
  $fscanf(STDIN, "%d %d\n", num_inputs, num_test_cases);
  $display("num_inputs = %d, num_test_cases = %d\n", num_inputs, num_test_cases);

  inputs = new[num_inputs];

  for (int i = 0; i < num_test_cases; i++) begin
    for (int j = 0; j < num_inputs; j++) begin
      $fscanf(STDIN, "%h\n", inputs[j]);
    end

    // First half of clock cycle 0 (inputs=inputs, clock=0)
    // Note that this evaluation also handles the combinational case.
    {set_inputs}
    {clear_clock}
    {display_inputs}
    #CLK_PERIOD;

    // For each requested clock cycle, finish the last half of the current clock
    // cycle and then start the first half of the next clock cycle.
    for (int clk_i = 0; clk_i < {initiation_interval}; clk_i++) begin
      // Second half of cycle clk_i (inputs=random, clock=1)
      {randomize_inputs} 
      {set_clock}
      #CLK_PERIOD;

      // First half of cycle clk_i+1 (inputs=random, clock=0)
      if (clk_i < {initiation_interval}-1) begin
        {clear_clock} 
        {randomize_inputs}
        #CLK_PERIOD;
      end
    end

    // Record whether any of the output bits are non-zero.
    seen_a_one = seen_a_one | {outputs_reduced_by_or};

    {display_outputs}
    assert({check_outputs});
  end

  assert(({expect_all_zero_outputs})^seen_a_one);

  $finish;
end

endmodule
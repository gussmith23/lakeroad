#lang rosette/safe

(require racket/base
         racket/match
         rackunit
         "generated/tmp.rkt"
         "signal.rkt"
         rosette/solver/smt/boolector
         rosette/lib/synthax)

(current-solver (boolector))

(define (run state)
  (define-symbolic* accum_direction (bitvector 5))
  (define-symbolic* accum_round (bitvector 1))
  (define-symbolic* accum_round_aclr (bitvector 5))
  (define-symbolic* accum_round_pipeline_aclr (bitvector 5))
  (define-symbolic* accum_round_pipeline_reg (bitvector 5))
  (define-symbolic* accum_round_reg (bitvector 5))
  (define-symbolic* accum_saturation (bitvector 1))
  (define-symbolic* accum_saturation_aclr (bitvector 5))
  (define-symbolic* accum_saturation_pipeline_aclr (bitvector 5))
  (define-symbolic* accum_saturation_pipeline_reg (bitvector 5))
  (define-symbolic* accum_saturation_reg (bitvector 5))
  (define-symbolic* accum_sload (bitvector 1))
  (define-symbolic* accum_sload_aclr (bitvector 5))
  (define-symbolic* accum_sload_pipeline_aclr (bitvector 5))
  (define-symbolic* accum_sload_pipeline_reg (bitvector 5))
  (define-symbolic* accum_sload_reg (bitvector 5))
  (define-symbolic* accum_sload_upper_data (bitvector 1))
  (define-symbolic* accum_sload_upper_data_aclr (bitvector 5))
  (define-symbolic* accum_sload_upper_data_pipeline_aclr (bitvector 5))
  (define-symbolic* accum_sload_upper_data_pipeline_reg (bitvector 5))
  (define-symbolic* accum_sload_upper_data_reg (bitvector 5))
  (define-symbolic* aclr0 (bitvector 1))
  (define-symbolic* aclr1 (bitvector 1))
  (define-symbolic* aclr2 (bitvector 1))
  (define-symbolic* aclr3 (bitvector 1))
  (define-symbolic* addnsub (bitvector 1))
  (define-symbolic* addnsub_aclr (bitvector 5))
  (define-symbolic* addnsub_pipeline_aclr (bitvector 5))
  (define-symbolic* addnsub_pipeline_reg (bitvector 5))
  (define-symbolic* addnsub_reg (bitvector 5))
  (define-symbolic* clock0 (bitvector 1))
  (define-symbolic* clock1 (bitvector 1))
  (define-symbolic* clock2 (bitvector 1))
  (define-symbolic* clock3 (bitvector 1))
  (define-symbolic* coefsel0 (bitvector 3))
  (define-symbolic* coefsel1 (bitvector 3))
  (define-symbolic* coefsel2 (bitvector 3))
  (define-symbolic* coefsel3 (bitvector 3))
  (define-symbolic* dataa (bitvector 2))
  (define-symbolic* datab (bitvector 2))
  (define-symbolic* datac (bitvector 22))
  (define-symbolic* dedicated_multiplier_circuitry (bitvector 5))
  (define-symbolic* dsp_block_balancing (bitvector 5))
  (define-symbolic* ena0 (bitvector 1))
  (define-symbolic* ena1 (bitvector 1))
  (define-symbolic* ena2 (bitvector 1))
  (define-symbolic* ena3 (bitvector 1))
  (define-symbolic* input_aclr_a (bitvector 5))
  (define-symbolic* input_aclr_b (bitvector 5))
  (define-symbolic* input_reg_a (bitvector 5))
  (define-symbolic* input_reg_b (bitvector 5))
  (define-symbolic* input_source_a (bitvector 5))
  (define-symbolic* input_source_b (bitvector 5))
  (define-symbolic* intended_device_family (bitvector 5))
  (define-symbolic* lpm_hint (bitvector 5))
  (define-symbolic* lpm_type (bitvector 5))
  (define-symbolic* mult_round (bitvector 1))
  (define-symbolic* mult_round_aclr (bitvector 5))
  (define-symbolic* mult_round_reg (bitvector 5))
  (define-symbolic* mult_saturation (bitvector 1))
  (define-symbolic* mult_saturation_aclr (bitvector 5))
  (define-symbolic* mult_saturation_reg (bitvector 5))
  (define-symbolic* multiplier1_direction (bitvector 5))
  (define-symbolic* multiplier3_direction (bitvector 5))
  (define-symbolic* multiplier_aclr (bitvector 5))
  (define-symbolic* multiplier_reg (bitvector 5))
  (define-symbolic* output_aclr (bitvector 5))
  (define-symbolic* output_reg (bitvector 5))
  (define-symbolic* port_accum_is_saturated (bitvector 1))
  (define-symbolic* port_addnsub (bitvector 5))
  (define-symbolic* port_mult_is_saturated (bitvector 1))
  (define-symbolic* port_signa (bitvector 5))
  (define-symbolic* port_signb (bitvector 5))
  (define-symbolic* representation_a (bitvector 5))
  (define-symbolic* representation_b (bitvector 5))
  (define-symbolic* scanina (bitvector 18))
  (define-symbolic* scaninb (bitvector 18))
  (define-symbolic* sign_aclr_a (bitvector 5))
  (define-symbolic* sign_aclr_b (bitvector 5))
  (define-symbolic* sign_pipeline_aclr_a (bitvector 5))
  (define-symbolic* sign_pipeline_aclr_b (bitvector 5))
  (define-symbolic* sign_pipeline_reg_a (bitvector 5))
  (define-symbolic* sign_pipeline_reg_b (bitvector 5))
  (define-symbolic* sign_reg_a (bitvector 5))
  (define-symbolic* sign_reg_b (bitvector 5))
  (define-symbolic* signa (bitvector 1))
  (define-symbolic* signb (bitvector 1))
  (define-symbolic* sourcea (bitvector 1))
  (define-symbolic* sourceb (bitvector 1))

  (define-symbolic* unnamed-input-123 (bitvector 1))
  (define-symbolic* unnamed-input-125 (bitvector 1))
  (define-symbolic* unnamed-input-168 (bitvector 4))
  (define-symbolic* unnamed-input-269 (bitvector 1))
  (define-symbolic* unnamed-input-271 (bitvector 5))
  (define-symbolic* unnamed-input-304 (bitvector 5))
  (define-symbolic* unnamed-input-319 (bitvector 1))

  (assoc-ref (intel-altmult-accum #:accum_round (signal accum_round state)
                                  #:accum_saturation (bv->signal accum_saturation)
                                  #:accum_sload (bv->signal accum_sload)
                                  #:accum_sload_upper_data (bv->signal accum_sload_upper_data)
                                  #:aclr0 (bv->signal aclr0)
                                  #:aclr1 (bv->signal aclr1)
                                  #:aclr2 (bv->signal aclr2)
                                  #:aclr3 (bv->signal aclr3)
                                  #:addnsub (bv->signal addnsub)
                                  #:clock0 (bv->signal clock0)
                                  #:clock1 (bv->signal clock1)
                                  #:clock2 (bv->signal clock2)
                                  #:clock3 (bv->signal clock3)
                                  #:coefsel0 (bv->signal coefsel0)
                                  #:coefsel1 (bv->signal coefsel1)
                                  #:coefsel2 (bv->signal coefsel2)
                                  #:coefsel3 (bv->signal coefsel3)
                                  #:dataa (bv->signal dataa)
                                  #:datab (bv->signal datab)
                                  #:datac (bv->signal datac)
                                  #:ena0 (bv->signal ena0)
                                  #:ena1 (bv->signal ena1)
                                  #:ena2 (bv->signal ena2)
                                  #:ena3 (bv->signal ena3)
                                  #:mult_round (bv->signal mult_round)
                                  #:mult_saturation (bv->signal mult_saturation)
                                  #:scanina (bv->signal scanina)
                                  #:scaninb (bv->signal scaninb)
                                  #:signa (bv->signal signa)
                                  #:signb (bv->signal signb)
                                  #:sourcea (bv->signal sourcea)
                                  #:sourceb (bv->signal sourceb)
                                  #:unnamed-input-123 (bv->signal unnamed-input-123)
                                  #:unnamed-input-125 (bv->signal unnamed-input-125)
                                  #:unnamed-input-168 (bv->signal unnamed-input-168)
                                  #:unnamed-input-269 (bv->signal unnamed-input-269)
                                  #:unnamed-input-271 (bv->signal unnamed-input-271)
                                  #:unnamed-input-304 (bv->signal unnamed-input-304)
                                  #:unnamed-input-319 (bv->signal unnamed-input-319))
             'result))

(define o0 (run (list)))
(define o1 (run (signal-state o0)))
(define o2 (run (signal-state o1)))
(define o3 (run (signal-state o2)))
;;; (define o4 (run (signal-state o3)))
;;; (define o5 (run (signal-state o4)))
;;; (define o6 (run (signal-state o5)))
;;; (define o7 (run (signal-state o6)))
;;; (define o8 (run (signal-state o7)))
;;; (define o9 (run (signal-state o8)))

(error-print-width 100000)

;(match-define (list aclr120 aclr24 clock0 ena0 dataa) (symbolics (signal-value o1)))
;(evaluate (signal-value o1) (sat (hash aclr24 (bv 0 1) aclr120 (bv 0 1) clock0 (bv 1 1) ena0 (bv 1 1) dataa (bv 1 2))))
;(vc)

(test-true "find any nonzero output" (sat? (solve (assert (bveq (bv 1 5) (signal-value o3))))))


#include "~a"
#include "verilated.h"

int run(~a *top, uint8_t l0, uint8_t l1, uint8_t l2, uint8_t l3, uint8_t l4, uint8_t l5)
{
  ~a ~a ~a ~a ~a ~a
       top->eval();
  return top->out0;
}

int main(int argc, char **argv, char **env)
{
  int l0_bound = ~a;
  int l1_bound = ~a;
  int l2_bound = ~a;
  int l3_bound = ~a;
  int l4_bound = ~a;
  int l5_bound = ~a;

  VerilatedContext *contextp = new VerilatedContext;
  contextp->commandArgs(argc, argv);
  ~a *top = new ~a{contextp};

  for (int l0_val = 0; l0_val < l0_bound; l0_val++)
  {
    for (int l1_val = 0; l1_val < l1_bound; l1_val++)
    {
      for (int l2_val = 0; l2_val < l2_bound; l2_val++)
      {
        for (int l3_val = 0; l3_val < l3_bound; l3_val++)
        {
          for (int l4_val = 0; l4_val < l4_bound; l4_val++)
          {
            for (int l5_val = 0; l5_val < l5_bound; l5_val++)
            {
              uint8_t l0 = (uint8_t)l0_val;
              uint8_t l1 = (uint8_t)l1_val;
              uint8_t l2 = (uint8_t)l2_val;
              uint8_t l3 = (uint8_t)l3_val;
              uint8_t l4 = (uint8_t)l4_val;
              uint8_t l5 = (uint8_t)l5_val;

              uint8_t out = run(top, l0, l1, l2, l3, l4, l5);
              uint8_t expected = ~a & ((1 << ~a) - 1);

              // Uncomment this when you want to debug.
              if (out != expected){
                printf("~a with l0=%d l1=%d l2=%d  == %d, should equal %d\n", l0, l1, l2, out, expected);
              }

              assert(out == expected);
            }
          }
        }
      }
    }
  }

  delete top;
  delete contextp;
  return 0;
}
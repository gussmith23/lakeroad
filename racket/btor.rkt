#lang errortrace racket
;;; Utilities for .btor files.

(provide parse-btor)

(require rosette
         racket/hash)

(define (parse-btor str)

  ;;; Maps ids (number) to bv expressions.
  (define h (make-hash))
  (define (get id)
    (hash-ref h id))
  (define (get-str id-str)
    (get (string->number id-str)))

  (define ins (make-hash))
  (define outs (make-hash))

  (for ([line (filter (lambda (line) (not (equal? #\; (string-ref line 0))))
                      (string-split str #rx"\n+"))])
    (match-let* ([line (first (string-split line ";"))] ;;; Remove comments.
                 [(cons id-str tokens) (string-split line)]
                 [id (string->number id-str)])
      (match tokens
        [`("sort" "bitvec" ,width-str) (hash-set! h id (bitvector (string->number width-str)))]
        ;;; Sometimes the .btor files contain inputs without names. I'm unsure what these are. We just
        ;;; ignore them for now.
        ;;;
        ;;; After looking through Yosys code, I think these occur when X values appear in designs.
        [`("input" ,type-id-str)
         (let* ([type (hash-ref h (string->number type-id-str))]
                [const (constant `(unnamed-input ,id) type)])
           ;;; (displayln (format "Unnamed input found with id ~a and type id ~a" id type-id-str)
           ;;;            (current-error-port))
           (hash-set! h id const))]
        [`("input" ,type-id-str ,name)
         (let* ([type (hash-ref h (string->number type-id-str))]
                [const (constant (string->symbol name) type)])
           (hash-set! ins name const)
           (hash-set! h id const))]
        [`("const" ,type-id-str ,value-str)
         (let* ([type (hash-ref h (string->number type-id-str))] [value (string->number value-str 2)])
           (hash-set! h id (bv value type)))]
        [`("ite" ,type-id-str ,cond-id-str ,true-val-id-str ,false-val-id-str)
         (hash-set! h
                    id
                    (if (bitvector->bool (get-str cond-id-str))
                        (get-str true-val-id-str)
                        (get-str false-val-id-str)))]
        [`("slice" ,type-id-str ,val-id-str ,u-str ,l-str)
         (hash-set! h
                    id
                    (extract (string->number u-str) (string->number l-str) (get-str val-id-str)))]
        [`("output" ,id-str ,name)
         (hash-set! outs name (get-str id-str))
         (hash-set! h id name)]
        [`("uext" ,out-type-id-str ,in-id-str ,_ ...)
         (hash-set! h id (zero-extend (get-str in-id-str) (get-str out-type-id-str)))]
        [`("not" ,out-type-id-str ,in-id-str) (hash-set! h id (bvnot (get-str in-id-str)))]
        [`("eq" ,out-type-id-str ,a-id-str ,b-id-str)
         (hash-set! h
                    id
                    (bool->bitvector (bveq (get-str a-id-str) (get-str b-id-str))
                                     (get-str out-type-id-str)))]
        [`("and" ,out-type-id-str ,a-id-str ,b-id-str)
         (hash-set! h id (bvand (get-str a-id-str) (get-str b-id-str)))]
        [`("or" ,out-type-id-str ,a-id-str ,b-id-str)
         (hash-set! h id (bvor (get-str a-id-str) (get-str b-id-str)))]
        [`("xor" ,out-type-id-str ,a-id-str ,b-id-str)
         (hash-set! h id (bvxor (get-str a-id-str) (get-str b-id-str)))]
        [`("concat" ,out-type-id-str ,a-id-str ,b-id-str)
         (hash-set! h id (concat (get-str a-id-str) (get-str b-id-str)))]
        [`("srl" ,out-type-id-str ,a-id-str ,b-id-str)
         (hash-set! h id (bvlshr (get-str a-id-str) (get-str b-id-str)))]
        [`("redor" ,out-type-id-str ,in-id-str)
         (hash-set! h id (apply bvor (bitvector->bits (get-str in-id-str))))]
        [`("redand" ,out-type-id-str ,in-id-str)
         (hash-set! h id (apply bvand (bitvector->bits (get-str in-id-str))))])))

  (list ins outs))

(module+ test
  (require rackunit
           rosette/solver/smt/boolector
           "lut.rkt"
           "interpreter.rkt")

  (current-solver (boolector))

  (test-case
   "Parse a LUT4 and verify its implementation against our lut function."
   (begin
     (match-define (list ins outs)
       (parse-btor
        #<<here-string-delimiter
; BTOR description generated by Yosys 0.15+50 (git sha1 6318db615, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) for module LUT4.
1 sort bitvec 1
2 input 1 A ; myLUT4.v:2.19-2.20
3 input 1 B ; myLUT4.v:2.22-2.23
4 input 1 C ; myLUT4.v:2.25-2.26
5 input 1 D ; myLUT4.v:2.28-2.29
6 sort bitvec 16
7 input 6 INIT ; myLUT4.v:3.17-3.21
8 sort bitvec 8
9 slice 8 7 7 0
10 slice 8 7 15 8
11 ite 8 5 10 9
12 sort bitvec 4
13 slice 12 11 3 0
14 slice 12 11 7 4
15 ite 12 4 14 13
16 sort bitvec 2
17 slice 16 15 1 0
18 slice 16 15 3 2
19 ite 16 3 18 17
20 slice 1 19 0 0
21 slice 1 19 1 1
22 ite 1 2 21 20
23 output 22 Z ; myLUT4.v:2.38-2.39
24 uext 16 19 0 s1 ; myLUT4.v:7.16-7.18
25 uext 12 15 0 s2 ; myLUT4.v:6.16-6.18
26 uext 8 11 0 s3 ; myLUT4.v:5.16-5.18
; end of yosys output
here-string-delimiter
        ;
        ))

     (define A (hash-ref ins "A"))
     (define B (hash-ref ins "B"))
     (define C (hash-ref ins "C"))
     (define D (hash-ref ins "D"))
     (define INIT (hash-ref ins "INIT"))

     ;;; Verify the parsed LUT4 against our implementation of LUT.
     (check-true (unsat? (verify (assert (bveq (hash-ref outs "Z") (lut INIT (concat D C B A)))))))))

  (test-case
   "Parse a LUT4 and verify its implementation against our lut function."
   (begin
     (match-define (list ins outs)
       (parse-btor
        #<<here-string-delimiter
; BTOR description generated by Yosys 0.19+14 (git sha1 2326b9f90, clang 12.0.0 -fPIC -Os) for module CCU2C.
1 sort bitvec 1
2 input 1 A0 ; myCCU2C.v:17.25-17.27
3 input 1 A1 ; myCCU2C.v:17.41-17.43
4 input 1 B0 ; myCCU2C.v:17.29-17.31
5 input 1 B1 ; myCCU2C.v:17.45-17.47
6 input 1 C0 ; myCCU2C.v:17.33-17.35
7 input 1 C1 ; myCCU2C.v:17.49-17.51
8 input 1 CIN ; myCCU2C.v:17.20-17.23
9 input 1 D0 ; myCCU2C.v:17.37-17.39
10 input 1 D1 ; myCCU2C.v:17.53-17.55
11 sort bitvec 16
12 input 11 INIT0 ; myCCU2C.v:18.46-18.51
13 input 11 INIT1 ; myCCU2C.v:18.66-18.71
14 sort bitvec 64
15 input 14 INJECT1_0 ; myCCU2C.v:18.86-18.95
16 input 14 INJECT1_1 ; myCCU2C.v:18.110-18.119
17 sort bitvec 8
18 slice 17 13 7 0
19 slice 17 13 15 8
20 ite 17 10 19 18
21 sort bitvec 4
22 slice 21 20 3 0
23 slice 21 20 7 4
24 ite 21 7 23 22
25 sort bitvec 2
26 slice 25 24 1 0
27 slice 25 24 3 2
28 ite 25 5 27 26
29 slice 1 28 0 0
30 slice 1 28 1 1
31 ite 1 3 30 29
32 not 1 31
33 slice 25 13 1 0
34 slice 25 13 3 2
35 ite 25 5 34 33
36 slice 1 35 0 0
37 slice 1 35 1 1
38 ite 1 3 37 36
39 const 1 0
40 sort bitvec 24
41 const 40 010110010100010101010011
42 uext 14 41 40
43 eq 1 16 42
44 ite 1 43 39 38
45 and 1 32 44
46 slice 17 12 7 0
47 slice 17 12 15 8
48 ite 17 9 47 46
49 slice 21 48 3 0
50 slice 21 48 7 4
51 ite 21 6 50 49
52 slice 25 51 1 0
53 slice 25 51 3 2
54 ite 25 4 53 52
55 slice 1 54 0 0
56 slice 1 54 1 1
57 ite 1 2 56 55
58 not 1 57
59 slice 25 12 1 0
60 slice 25 12 3 2
61 ite 25 4 60 59
62 slice 1 61 0 0
63 slice 1 61 1 1
64 ite 1 2 63 62
65 uext 14 41 40
66 eq 1 15 65
67 ite 1 66 39 64
68 and 1 58 67
69 and 1 57 8
70 or 1 68 69
71 and 1 31 70
72 or 1 45 71
73 output 72 COUT ; myCCU2C.v:18.28-18.32
74 uext 14 41 40
75 eq 1 15 74
76 ite 1 75 39 8
77 xor 1 57 76
78 output 77 S0 ; myCCU2C.v:18.20-18.22
79 uext 14 41 40
80 eq 1 16 79
81 ite 1 80 39 70
82 xor 1 31 81
83 output 82 S1 ; myCCU2C.v:18.24-18.26
84 uext 1 64 0 LUT2_0 ; myCCU2C.v:26.15-26.21
85 uext 1 38 0 LUT2_1 ; myCCU2C.v:37.15-37.21
86 uext 1 57 0 LUT4_0 ; myCCU2C.v:26.7-26.13
87 uext 1 31 0 LUT4_1 ; myCCU2C.v:37.7-37.13
88 uext 1 70 0 cout_0 ; myCCU2C.v:34.7-34.13
89 uext 1 76 0 gated_cin_0 ; myCCU2C.v:30.7-30.18
90 uext 1 81 0 gated_cin_1 ; myCCU2C.v:41.7-41.18
91 uext 1 67 0 gated_lut2_0 ; myCCU2C.v:33.7-33.19
92 uext 1 44 0 gated_lut2_1 ; myCCU2C.v:44.7-44.19
93 uext 1 2 0 lut2_0.A ; myCCU2C.v:28.9-28.62|myCCU2C.v:11.19-11.20
94 uext 1 4 0 lut2_0.B ; myCCU2C.v:28.9-28.62|myCCU2C.v:11.22-11.23
95 slice 21 12 3 0
96 uext 21 95 0 lut2_0.INIT ; myCCU2C.v:28.9-28.62|myCCU2C.v:12.16-12.20
97 uext 1 64 0 lut2_0.Z ; myCCU2C.v:28.9-28.62|myCCU2C.v:11.32-11.33
98 uext 25 61 0 lut2_0.s1 ; myCCU2C.v:28.9-28.62|myCCU2C.v:14.16-14.18
99 uext 1 3 0 lut2_1.A ; myCCU2C.v:39.9-39.62|myCCU2C.v:11.19-11.20
100 uext 1 5 0 lut2_1.B ; myCCU2C.v:39.9-39.62|myCCU2C.v:11.22-11.23
101 slice 21 13 3 0
102 uext 21 101 0 lut2_1.INIT ; myCCU2C.v:39.9-39.62|myCCU2C.v:12.16-12.20
103 uext 1 38 0 lut2_1.Z ; myCCU2C.v:39.9-39.62|myCCU2C.v:11.32-11.33
104 uext 25 35 0 lut2_1.s1 ; myCCU2C.v:39.9-39.62|myCCU2C.v:14.16-14.18
105 uext 1 2 0 lut4_0.A ; myCCU2C.v:27.9-27.73|myCCU2C.v:3.19-3.20
106 uext 1 4 0 lut4_0.B ; myCCU2C.v:27.9-27.73|myCCU2C.v:3.22-3.23
107 uext 1 6 0 lut4_0.C ; myCCU2C.v:27.9-27.73|myCCU2C.v:3.25-3.26
108 uext 1 9 0 lut4_0.D ; myCCU2C.v:27.9-27.73|myCCU2C.v:3.28-3.29
109 uext 11 12 0 lut4_0.INIT ; myCCU2C.v:27.9-27.73|myCCU2C.v:4.17-4.21
110 uext 1 57 0 lut4_0.Z ; myCCU2C.v:27.9-27.73|myCCU2C.v:3.38-3.39
111 uext 25 54 0 lut4_0.s1 ; myCCU2C.v:27.9-27.73|myCCU2C.v:8.16-8.18
112 uext 21 51 0 lut4_0.s2 ; myCCU2C.v:27.9-27.73|myCCU2C.v:7.16-7.18
113 uext 17 48 0 lut4_0.s3 ; myCCU2C.v:27.9-27.73|myCCU2C.v:6.16-6.18
114 uext 1 3 0 lut4_1.A ; myCCU2C.v:38.9-38.73|myCCU2C.v:3.19-3.20
115 uext 1 5 0 lut4_1.B ; myCCU2C.v:38.9-38.73|myCCU2C.v:3.22-3.23
116 uext 1 7 0 lut4_1.C ; myCCU2C.v:38.9-38.73|myCCU2C.v:3.25-3.26
117 uext 1 10 0 lut4_1.D ; myCCU2C.v:38.9-38.73|myCCU2C.v:3.28-3.29
118 uext 11 13 0 lut4_1.INIT ; myCCU2C.v:38.9-38.73|myCCU2C.v:4.17-4.21
119 uext 1 31 0 lut4_1.Z ; myCCU2C.v:38.9-38.73|myCCU2C.v:3.38-3.39
120 uext 25 28 0 lut4_1.s1 ; myCCU2C.v:38.9-38.73|myCCU2C.v:8.16-8.18
121 uext 21 24 0 lut4_1.s2 ; myCCU2C.v:38.9-38.73|myCCU2C.v:7.16-7.18
122 uext 17 20 0 lut4_1.s3 ; myCCU2C.v:38.9-38.73|myCCU2C.v:6.16-6.18
; end of yosys output
here-string-delimiter
        ;
        ))

     (match-define (hash-table ("S0" S0) ("S1" S1) ("COUT" COUT)) outs)

     (match-define (hash-table ("A0" A0)
                               ("A1" A1)
                               ("B0" B0)
                               ("B1" B1)
                               ("C0" C0)
                               ("C1" C1)
                               ("CIN" CIN)
                               ("D0" D0)
                               ("D1" D1)
                               ("INIT0" INIT0)
                               ("INIT1" INIT1)
                               ("INJECT1_0" INJECT1_0)
                               ("INJECT1_1" INJECT1_1))
       ins)

     (check-equal?
      (unsat)
      (verify (begin

                (assume (bvzero? INJECT1_0))
                (assume (bvzero? INJECT1_1))

                (match-define (list iS0 iS1 iCOUT)
                  (interpret `(lattice-ecp5-ccu2c ,INIT0
                                                  ,INIT1
                                                  ,(bv 0 1)
                                                  ,(bv 0 1)
                                                  ,CIN
                                                  ,(list (concat D0 C0 B0 A0) (concat D1 C1 B1 A1)))))
                (assert (bveq S0 iS0))
                (assert (bveq S1 iS1))
                (assert (bveq COUT iCOUT)))))))

  (test-case
   "Parse a Xilinx LUT4 and verify its implementation against our lut function."
   (begin
     (match-define (list ins outs)
       (parse-btor
        #<<here-string-delimiter
; BTOR description generated by Yosys 0.15+50 (git sha1 6318db615, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) for module LUT4.
1 sort bitvec 1
2 input 1 I0 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:44.9-44.11
3 input 1 I1 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:45.9-45.11
4 input 1 I2 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:46.9-46.11
5 input 1 I3 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:47.9-47.11
6 sort bitvec 16
7 input 6 INIT ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:48.16-48.20
8 input 1
9 sort bitvec 4
10 input 1
11 slice 9 7 3 0
12 const 1 0
13 sort bitvec 2
14 concat 13 3 12
15 uext 9 14 2
16 srl 9 11 15
17 slice 1 16 0 0
18 const 1 1
19 eq 1 3 18
20 eq 1 3 12
21 or 1 19 20
22 uext 9 14 2
23 srl 9 11 22
24 slice 1 23 0 0
25 concat 13 3 18
26 uext 9 25 2
27 srl 9 11 26
28 slice 1 27 0 0
29 eq 1 24 28
30 and 1 21 29
31 ite 1 30 17 10
32 input 1
33 eq 1 2 18
34 eq 1 2 12
35 or 1 33 34
36 concat 13 12 2
37 uext 9 36 2
38 srl 9 11 37
39 slice 1 38 0 0
40 concat 13 18 2
41 uext 9 40 2
42 srl 9 11 41
43 slice 1 42 0 0
44 eq 1 39 43
45 and 1 35 44
46 ite 1 45 32 31
47 input 1
48 redor 1 11
49 not 1 48
50 redand 1 11
51 or 1 49 50
52 ite 1 51 47 46
53 input 1
54 xor 1 3 2
55 eq 1 54 18
56 xor 1 3 2
57 eq 1 56 12
58 or 1 55 57
59 ite 1 58 53 52
60 input 1
61 redor 1 7
62 not 1 61
63 redand 1 7
64 or 1 62 63
65 ite 1 64 60 59
66 input 1
67 xor 1 2 3
68 xor 1 67 4
69 xor 1 68 5
70 eq 1 69 12
71 xor 1 2 3
72 xor 1 71 4
73 xor 1 72 5
74 eq 1 73 18
75 or 1 70 74
76 ite 1 75 66 65
77 uext 9 36 2
78 srl 9 11 77
79 slice 1 78 0 0
80 ite 1 45 79 76
81 input 1
82 ite 1 51 81 80
83 input 1
84 ite 1 58 83 82
85 input 1
86 ite 1 64 85 84
87 input 1
88 ite 1 75 87 86
89 slice 1 7 0 0
90 ite 1 51 89 88
91 input 1
92 ite 1 58 91 90
93 input 1
94 ite 1 64 93 92
95 input 1
96 ite 1 75 95 94
97 concat 13 3 2
98 uext 9 97 2
99 srl 9 11 98
100 slice 1 99 0 0
101 ite 1 58 100 96
102 input 1
103 ite 1 64 102 101
104 input 1
105 ite 1 75 104 103
106 input 1
107 slice 9 7 7 4
108 uext 9 14 2
109 srl 9 107 108
110 slice 1 109 0 0
111 eq 1 3 18
112 eq 1 3 12
113 or 1 111 112
114 uext 9 14 2
115 srl 9 107 114
116 slice 1 115 0 0
117 uext 9 25 2
118 srl 9 107 117
119 slice 1 118 0 0
120 eq 1 116 119
121 and 1 113 120
122 ite 1 121 110 106
123 input 1
124 eq 1 2 18
125 eq 1 2 12
126 or 1 124 125
127 uext 9 36 2
128 srl 9 107 127
129 slice 1 128 0 0
130 uext 9 40 2
131 srl 9 107 130
132 slice 1 131 0 0
133 eq 1 129 132
134 and 1 126 133
135 ite 1 134 123 122
136 input 1
137 redor 1 107
138 not 1 137
139 redand 1 107
140 or 1 138 139
141 ite 1 140 136 135
142 input 1
143 xor 1 3 2
144 eq 1 143 18
145 xor 1 3 2
146 eq 1 145 12
147 or 1 144 146
148 ite 1 147 142 141
149 input 1
150 ite 1 64 149 148
151 input 1
152 ite 1 75 151 150
153 uext 9 36 2
154 srl 9 107 153
155 slice 1 154 0 0
156 ite 1 134 155 152
157 input 1
158 ite 1 140 157 156
159 input 1
160 ite 1 147 159 158
161 input 1
162 ite 1 64 161 160
163 input 1
164 ite 1 75 163 162
165 slice 1 7 4 4
166 ite 1 140 165 164
167 input 1
168 ite 1 147 167 166
169 input 1
170 ite 1 64 169 168
171 input 1
172 ite 1 75 171 170
173 uext 9 97 2
174 srl 9 107 173
175 slice 1 174 0 0
176 ite 1 147 175 172
177 input 1
178 ite 1 64 177 176
179 input 1
180 ite 1 75 179 178
181 input 1
182 slice 9 7 11 8
183 uext 9 14 2
184 srl 9 182 183
185 slice 1 184 0 0
186 eq 1 3 18
187 eq 1 3 12
188 or 1 186 187
189 uext 9 14 2
190 srl 9 182 189
191 slice 1 190 0 0
192 uext 9 25 2
193 srl 9 182 192
194 slice 1 193 0 0
195 eq 1 191 194
196 and 1 188 195
197 ite 1 196 185 181
198 input 1
199 eq 1 2 18
200 eq 1 2 12
201 or 1 199 200
202 uext 9 36 2
203 srl 9 182 202
204 slice 1 203 0 0
205 uext 9 40 2
206 srl 9 182 205
207 slice 1 206 0 0
208 eq 1 204 207
209 and 1 201 208
210 ite 1 209 198 197
211 input 1
212 redor 1 182
213 not 1 212
214 redand 1 182
215 or 1 213 214
216 ite 1 215 211 210
217 input 1
218 xor 1 3 2
219 eq 1 218 18
220 xor 1 3 2
221 eq 1 220 12
222 or 1 219 221
223 ite 1 222 217 216
224 input 1
225 ite 1 64 224 223
226 input 1
227 ite 1 75 226 225
228 uext 9 36 2
229 srl 9 182 228
230 slice 1 229 0 0
231 ite 1 209 230 227
232 input 1
233 ite 1 215 232 231
234 input 1
235 ite 1 222 234 233
236 input 1
237 ite 1 64 236 235
238 input 1
239 ite 1 75 238 237
240 slice 1 7 8 8
241 ite 1 215 240 239
242 input 1
243 ite 1 222 242 241
244 input 1
245 ite 1 64 244 243
246 input 1
247 ite 1 75 246 245
248 uext 9 97 2
249 srl 9 182 248
250 slice 1 249 0 0
251 ite 1 222 250 247
252 input 1
253 ite 1 64 252 251
254 input 1
255 ite 1 75 254 253
256 input 1
257 slice 9 7 15 12
258 uext 9 14 2
259 srl 9 257 258
260 slice 1 259 0 0
261 eq 1 3 18
262 eq 1 3 12
263 or 1 261 262
264 uext 9 14 2
265 srl 9 257 264
266 slice 1 265 0 0
267 uext 9 25 2
268 srl 9 257 267
269 slice 1 268 0 0
270 eq 1 266 269
271 and 1 263 270
272 ite 1 271 260 256
273 input 1
274 eq 1 2 18
275 eq 1 2 12
276 or 1 274 275
277 uext 9 36 2
278 srl 9 257 277
279 slice 1 278 0 0
280 uext 9 40 2
281 srl 9 257 280
282 slice 1 281 0 0
283 eq 1 279 282
284 and 1 276 283
285 ite 1 284 273 272
286 input 1
287 redor 1 257
288 not 1 287
289 redand 1 257
290 or 1 288 289
291 ite 1 290 286 285
292 input 1
293 xor 1 3 2
294 eq 1 293 18
295 xor 1 3 2
296 eq 1 295 12
297 or 1 294 296
298 ite 1 297 292 291
299 input 1
300 ite 1 64 299 298
301 input 1
302 ite 1 75 301 300
303 uext 9 36 2
304 srl 9 257 303
305 slice 1 304 0 0
306 ite 1 284 305 302
307 input 1
308 ite 1 290 307 306
309 input 1
310 ite 1 297 309 308
311 input 1
312 ite 1 64 311 310
313 input 1
314 ite 1 75 313 312
315 slice 1 7 12 12
316 ite 1 290 315 314
317 input 1
318 ite 1 297 317 316
319 input 1
320 ite 1 64 319 318
321 input 1
322 ite 1 75 321 320
323 uext 9 97 2
324 srl 9 257 323
325 slice 1 324 0 0
326 ite 1 297 325 322
327 input 1
328 ite 1 64 327 326
329 input 1
330 ite 1 75 329 328
331 concat 13 180 105
332 sort bitvec 3
333 concat 332 255 331
334 concat 9 330 333
335 concat 13 5 12
336 uext 9 335 2
337 srl 9 334 336
338 slice 1 337 0 0
339 eq 1 5 18
340 eq 1 5 12
341 or 1 339 340
342 uext 9 335 2
343 srl 9 334 342
344 slice 1 343 0 0
345 concat 13 5 18
346 uext 9 345 2
347 srl 9 334 346
348 slice 1 347 0 0
349 eq 1 344 348
350 and 1 341 349
351 ite 1 350 338 8
352 input 1
353 eq 1 4 18
354 eq 1 4 12
355 or 1 353 354
356 concat 13 12 4
357 uext 9 356 2
358 srl 9 334 357
359 slice 1 358 0 0
360 concat 13 18 4
361 uext 9 360 2
362 srl 9 334 361
363 slice 1 362 0 0
364 eq 1 359 363
365 and 1 355 364
366 ite 1 365 352 351
367 input 1
368 redor 1 334
369 not 1 368
370 redand 1 334
371 or 1 369 370
372 ite 1 371 367 366
373 input 1
374 xor 1 5 4
375 eq 1 374 18
376 xor 1 5 4
377 eq 1 376 12
378 or 1 375 377
379 ite 1 378 373 372
380 input 1
381 ite 1 64 380 379
382 input 1
383 ite 1 75 382 381
384 uext 9 356 2
385 srl 9 334 384
386 slice 1 385 0 0
387 ite 1 365 386 383
388 input 1
389 ite 1 371 388 387
390 input 1
391 ite 1 378 390 389
392 input 1
393 ite 1 64 392 391
394 input 1
395 ite 1 75 394 393
396 ite 1 371 105 395
397 input 1
398 ite 1 378 397 396
399 input 1
400 ite 1 64 399 398
401 input 1
402 ite 1 75 401 400
403 concat 13 5 4
404 uext 9 403 2
405 srl 9 334 404
406 slice 1 405 0 0
407 ite 1 378 406 402
408 input 1
409 ite 1 64 408 407
410 input 1
411 ite 1 75 410 409
412 ite 1 64 89 411
413 input 1
414 ite 1 75 413 412
415 concat 13 3 2
416 concat 332 4 415
417 concat 9 5 416
418 uext 6 417 12
419 srl 6 7 418
420 slice 1 419 0 0
421 ite 1 75 420 414
422 output 421 O ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:42.10-42.11
423 uext 6 7 0 INIT_REG ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:56.14-56.22
424 uext 1 421 0 O_out ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:61.7-61.12
425 input 1
426 uext 1 425 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:88$4.$result ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:0.0-0.0
427 input 9
428 uext 9 427 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:88$4.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:66.15-66.16
429 input 13
430 uext 13 429 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:88$4.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:67.15-67.16
431 input 1
432 uext 1 431 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:88$5.$result ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:0.0-0.0
433 input 9
434 uext 9 433 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:88$5.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:66.15-66.16
435 input 13
436 uext 13 435 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:88$5.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:67.15-67.16
437 input 1
438 uext 1 437 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:89$3.$result ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:0.0-0.0
439 input 9
440 uext 9 439 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:89$3.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:66.15-66.16
441 input 13
442 uext 13 441 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:89$3.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:67.15-67.16
443 input 1
444 uext 1 443 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:90$2.$result ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:0.0-0.0
445 input 9
446 uext 9 445 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:90$2.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:66.15-66.16
447 input 13
448 uext 13 447 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:90$2.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:67.15-67.16
449 input 1
450 uext 1 449 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:91$1.$result ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:0.0-0.0
451 input 9
452 uext 9 451 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:91$1.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:66.15-66.16
453 input 13
454 uext 13 453 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:91$1.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:67.15-67.16
455 uext 1 12 0 trig_attr ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmpyvu9t704:53.7-53.16
; end of yosys output
here-string-delimiter
        ;
        ))

     (match-define (hash-table ("O" O)) outs)

     (match-define (hash-table ("I0" I0) ("I1" I1) ("I2" I2) ("I3" I3) ("INIT" INIT)) ins)
     (check-equal? (unsat) (verify (assert (bveq O (lut INIT (concat I3 I2 I1 I0))))))))

  (test-case
   "Parse a Xilinx LUT6_2 and verify its implementation against our lut function."
   (begin
     (clear-terms!)
     (match-define (list ins outs)
       (parse-btor
        #<<here-string-delimiter
; BTOR description generated by Yosys 0.15+50 (git sha1 6318db615, x86_64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) for module LUT6_2.
1 sort bitvec 1
2 input 1 I0 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:45.9-45.11
3 input 1 I1 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:46.9-46.11
4 input 1 I2 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:47.9-47.11
5 input 1 I3 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:48.9-48.11
6 input 1 I4 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:49.9-49.11
7 input 1 I5 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:50.9-50.11
8 sort bitvec 64
9 input 8 INIT ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:51.16-51.20
10 input 1
11 sort bitvec 4
12 input 1
13 sort bitvec 8
14 slice 13 9 7 0
15 sort bitvec 2
16 const 15 00
17 sort bitvec 3
18 concat 17 4 16
19 uext 13 18 5
20 srl 13 14 19
21 slice 1 20 0 0
22 const 1 1
23 eq 1 4 22
24 const 1 0
25 eq 1 4 24
26 or 1 23 25
27 const 15 01
28 concat 17 4 27
29 uext 13 28 5
30 srl 13 14 29
31 slice 1 30 0 0
32 eq 1 21 31
33 and 1 26 32
34 const 15 10
35 concat 17 4 34
36 uext 13 35 5
37 srl 13 14 36
38 slice 1 37 0 0
39 eq 1 21 38
40 and 1 33 39
41 const 15 11
42 concat 17 4 41
43 uext 13 42 5
44 srl 13 14 43
45 slice 1 44 0 0
46 eq 1 21 45
47 and 1 40 46
48 ite 1 47 21 12
49 concat 15 3 24
50 uext 13 49 6
51 srl 13 14 50
52 slice 1 51 0 0
53 eq 1 3 22
54 eq 1 3 24
55 or 1 53 54
56 concat 15 3 22
57 uext 13 56 6
58 srl 13 14 57
59 slice 1 58 0 0
60 eq 1 52 59
61 and 1 55 60
62 concat 15 3 24
63 concat 17 22 62
64 uext 13 63 5
65 srl 13 14 64
66 slice 1 65 0 0
67 eq 1 52 66
68 and 1 61 67
69 concat 15 3 22
70 concat 17 22 69
71 uext 13 70 5
72 srl 13 14 71
73 slice 1 72 0 0
74 eq 1 52 73
75 and 1 68 74
76 ite 1 75 52 48
77 uext 13 2 7
78 srl 13 14 77
79 slice 1 78 0 0
80 eq 1 2 22
81 eq 1 2 24
82 or 1 80 81
83 concat 15 22 2
84 uext 13 83 6
85 srl 13 14 84
86 slice 1 85 0 0
87 eq 1 79 86
88 and 1 82 87
89 concat 17 34 2
90 uext 13 89 5
91 srl 13 14 90
92 slice 1 91 0 0
93 eq 1 79 92
94 and 1 88 93
95 concat 17 41 2
96 uext 13 95 5
97 srl 13 14 96
98 slice 1 97 0 0
99 eq 1 79 98
100 and 1 94 99
101 ite 1 100 79 76
102 concat 15 3 24
103 concat 17 4 102
104 uext 13 103 5
105 srl 13 14 104
106 slice 1 105 0 0
107 xor 1 4 3
108 eq 1 107 22
109 eq 1 107 24
110 or 1 108 109
111 concat 15 3 22
112 concat 17 4 111
113 uext 13 112 5
114 srl 13 14 113
115 slice 1 114 0 0
116 eq 1 106 115
117 and 1 110 116
118 ite 1 117 106 101
119 concat 15 24 2
120 concat 17 4 119
121 uext 13 120 5
122 srl 13 14 121
123 slice 1 122 0 0
124 xor 1 4 2
125 eq 1 124 22
126 eq 1 124 24
127 or 1 125 126
128 concat 15 22 2
129 concat 17 4 128
130 uext 13 129 5
131 srl 13 14 130
132 slice 1 131 0 0
133 eq 1 123 132
134 and 1 127 133
135 ite 1 134 123 118
136 concat 15 3 2
137 uext 13 136 6
138 srl 13 14 137
139 slice 1 138 0 0
140 xor 1 2 3
141 eq 1 140 22
142 eq 1 140 24
143 or 1 141 142
144 concat 15 3 2
145 concat 17 22 144
146 uext 13 145 5
147 srl 13 14 146
148 slice 1 147 0 0
149 eq 1 139 148
150 and 1 143 149
151 ite 1 150 139 135
152 slice 1 9 0 0
153 redor 1 14
154 not 1 153
155 redand 1 14
156 or 1 154 155
157 ite 1 156 152 151
158 concat 15 3 2
159 concat 17 4 158
160 uext 13 159 5
161 srl 13 14 160
162 slice 1 161 0 0
163 xor 1 107 2
164 eq 1 163 22
165 eq 1 163 24
166 or 1 164 165
167 ite 1 166 162 157
168 input 1
169 sort bitvec 32
170 slice 169 9 31 0
171 redor 1 170
172 not 1 171
173 redand 1 170
174 or 1 172 173
175 ite 1 174 168 167
176 input 1
177 xor 1 140 4
178 xor 1 177 5
179 xor 1 178 6
180 eq 1 179 24
181 eq 1 179 22
182 or 1 180 181
183 ite 1 182 176 175
184 input 1
185 slice 13 9 15 8
186 uext 13 18 5
187 srl 13 185 186
188 slice 1 187 0 0
189 uext 13 28 5
190 srl 13 185 189
191 slice 1 190 0 0
192 eq 1 188 191
193 and 1 26 192
194 uext 13 35 5
195 srl 13 185 194
196 slice 1 195 0 0
197 eq 1 188 196
198 and 1 193 197
199 uext 13 42 5
200 srl 13 185 199
201 slice 1 200 0 0
202 eq 1 188 201
203 and 1 198 202
204 ite 1 203 188 184
205 uext 13 49 6
206 srl 13 185 205
207 slice 1 206 0 0
208 uext 13 56 6
209 srl 13 185 208
210 slice 1 209 0 0
211 eq 1 207 210
212 and 1 55 211
213 uext 13 63 5
214 srl 13 185 213
215 slice 1 214 0 0
216 eq 1 207 215
217 and 1 212 216
218 uext 13 70 5
219 srl 13 185 218
220 slice 1 219 0 0
221 eq 1 207 220
222 and 1 217 221
223 ite 1 222 207 204
224 uext 13 2 7
225 srl 13 185 224
226 slice 1 225 0 0
227 uext 13 83 6
228 srl 13 185 227
229 slice 1 228 0 0
230 eq 1 226 229
231 and 1 82 230
232 uext 13 89 5
233 srl 13 185 232
234 slice 1 233 0 0
235 eq 1 226 234
236 and 1 231 235
237 uext 13 95 5
238 srl 13 185 237
239 slice 1 238 0 0
240 eq 1 226 239
241 and 1 236 240
242 ite 1 241 226 223
243 uext 13 103 5
244 srl 13 185 243
245 slice 1 244 0 0
246 uext 13 112 5
247 srl 13 185 246
248 slice 1 247 0 0
249 eq 1 245 248
250 and 1 110 249
251 ite 1 250 245 242
252 uext 13 120 5
253 srl 13 185 252
254 slice 1 253 0 0
255 uext 13 129 5
256 srl 13 185 255
257 slice 1 256 0 0
258 eq 1 254 257
259 and 1 127 258
260 ite 1 259 254 251
261 uext 13 136 6
262 srl 13 185 261
263 slice 1 262 0 0
264 uext 13 145 5
265 srl 13 185 264
266 slice 1 265 0 0
267 eq 1 263 266
268 and 1 143 267
269 ite 1 268 263 260
270 slice 1 9 8 8
271 redor 1 185
272 not 1 271
273 redand 1 185
274 or 1 272 273
275 ite 1 274 270 269
276 uext 13 159 5
277 srl 13 185 276
278 slice 1 277 0 0
279 ite 1 166 278 275
280 input 1
281 ite 1 174 280 279
282 input 1
283 ite 1 182 282 281
284 input 1
285 slice 13 9 23 16
286 uext 13 18 5
287 srl 13 285 286
288 slice 1 287 0 0
289 uext 13 28 5
290 srl 13 285 289
291 slice 1 290 0 0
292 eq 1 288 291
293 and 1 26 292
294 uext 13 35 5
295 srl 13 285 294
296 slice 1 295 0 0
297 eq 1 288 296
298 and 1 293 297
299 uext 13 42 5
300 srl 13 285 299
301 slice 1 300 0 0
302 eq 1 288 301
303 and 1 298 302
304 ite 1 303 288 284
305 uext 13 49 6
306 srl 13 285 305
307 slice 1 306 0 0
308 uext 13 56 6
309 srl 13 285 308
310 slice 1 309 0 0
311 eq 1 307 310
312 and 1 55 311
313 uext 13 63 5
314 srl 13 285 313
315 slice 1 314 0 0
316 eq 1 307 315
317 and 1 312 316
318 uext 13 70 5
319 srl 13 285 318
320 slice 1 319 0 0
321 eq 1 307 320
322 and 1 317 321
323 ite 1 322 307 304
324 uext 13 2 7
325 srl 13 285 324
326 slice 1 325 0 0
327 uext 13 83 6
328 srl 13 285 327
329 slice 1 328 0 0
330 eq 1 326 329
331 and 1 82 330
332 uext 13 89 5
333 srl 13 285 332
334 slice 1 333 0 0
335 eq 1 326 334
336 and 1 331 335
337 uext 13 95 5
338 srl 13 285 337
339 slice 1 338 0 0
340 eq 1 326 339
341 and 1 336 340
342 ite 1 341 326 323
343 uext 13 103 5
344 srl 13 285 343
345 slice 1 344 0 0
346 uext 13 112 5
347 srl 13 285 346
348 slice 1 347 0 0
349 eq 1 345 348
350 and 1 110 349
351 ite 1 350 345 342
352 uext 13 120 5
353 srl 13 285 352
354 slice 1 353 0 0
355 uext 13 129 5
356 srl 13 285 355
357 slice 1 356 0 0
358 eq 1 354 357
359 and 1 127 358
360 ite 1 359 354 351
361 uext 13 136 6
362 srl 13 285 361
363 slice 1 362 0 0
364 uext 13 145 5
365 srl 13 285 364
366 slice 1 365 0 0
367 eq 1 363 366
368 and 1 143 367
369 ite 1 368 363 360
370 slice 1 9 16 16
371 redor 1 285
372 not 1 371
373 redand 1 285
374 or 1 372 373
375 ite 1 374 370 369
376 uext 13 159 5
377 srl 13 285 376
378 slice 1 377 0 0
379 ite 1 166 378 375
380 input 1
381 ite 1 174 380 379
382 input 1
383 ite 1 182 382 381
384 input 1
385 slice 13 9 31 24
386 uext 13 18 5
387 srl 13 385 386
388 slice 1 387 0 0
389 uext 13 28 5
390 srl 13 385 389
391 slice 1 390 0 0
392 eq 1 388 391
393 and 1 26 392
394 uext 13 35 5
395 srl 13 385 394
396 slice 1 395 0 0
397 eq 1 388 396
398 and 1 393 397
399 uext 13 42 5
400 srl 13 385 399
401 slice 1 400 0 0
402 eq 1 388 401
403 and 1 398 402
404 ite 1 403 388 384
405 uext 13 49 6
406 srl 13 385 405
407 slice 1 406 0 0
408 uext 13 56 6
409 srl 13 385 408
410 slice 1 409 0 0
411 eq 1 407 410
412 and 1 55 411
413 uext 13 63 5
414 srl 13 385 413
415 slice 1 414 0 0
416 eq 1 407 415
417 and 1 412 416
418 uext 13 70 5
419 srl 13 385 418
420 slice 1 419 0 0
421 eq 1 407 420
422 and 1 417 421
423 ite 1 422 407 404
424 uext 13 2 7
425 srl 13 385 424
426 slice 1 425 0 0
427 uext 13 83 6
428 srl 13 385 427
429 slice 1 428 0 0
430 eq 1 426 429
431 and 1 82 430
432 uext 13 89 5
433 srl 13 385 432
434 slice 1 433 0 0
435 eq 1 426 434
436 and 1 431 435
437 uext 13 95 5
438 srl 13 385 437
439 slice 1 438 0 0
440 eq 1 426 439
441 and 1 436 440
442 ite 1 441 426 423
443 uext 13 103 5
444 srl 13 385 443
445 slice 1 444 0 0
446 uext 13 112 5
447 srl 13 385 446
448 slice 1 447 0 0
449 eq 1 445 448
450 and 1 110 449
451 ite 1 450 445 442
452 uext 13 120 5
453 srl 13 385 452
454 slice 1 453 0 0
455 uext 13 129 5
456 srl 13 385 455
457 slice 1 456 0 0
458 eq 1 454 457
459 and 1 127 458
460 ite 1 459 454 451
461 uext 13 136 6
462 srl 13 385 461
463 slice 1 462 0 0
464 uext 13 145 5
465 srl 13 385 464
466 slice 1 465 0 0
467 eq 1 463 466
468 and 1 143 467
469 ite 1 468 463 460
470 slice 1 9 24 24
471 redor 1 385
472 not 1 471
473 redand 1 385
474 or 1 472 473
475 ite 1 474 470 469
476 uext 13 159 5
477 srl 13 385 476
478 slice 1 477 0 0
479 ite 1 166 478 475
480 input 1
481 ite 1 174 480 479
482 input 1
483 ite 1 182 482 481
484 concat 15 283 183
485 concat 17 383 484
486 concat 11 483 485
487 concat 15 6 24
488 uext 11 487 2
489 srl 11 486 488
490 slice 1 489 0 0
491 eq 1 6 22
492 eq 1 6 24
493 or 1 491 492
494 concat 15 6 22
495 uext 11 494 2
496 srl 11 486 495
497 slice 1 496 0 0
498 eq 1 490 497
499 and 1 493 498
500 ite 1 499 490 10
501 uext 11 5 3
502 srl 11 486 501
503 slice 1 502 0 0
504 eq 1 5 22
505 eq 1 5 24
506 or 1 504 505
507 concat 15 22 5
508 uext 11 507 2
509 srl 11 486 508
510 slice 1 509 0 0
511 eq 1 503 510
512 and 1 506 511
513 ite 1 512 503 500
514 redor 1 486
515 not 1 514
516 redand 1 486
517 or 1 515 516
518 ite 1 517 183 513
519 concat 15 6 5
520 uext 11 519 2
521 srl 11 486 520
522 slice 1 521 0 0
523 xor 1 6 5
524 eq 1 523 22
525 eq 1 523 24
526 or 1 524 525
527 ite 1 526 522 518
528 ite 1 174 152 527
529 concat 15 3 2
530 concat 17 4 529
531 concat 11 5 530
532 sort bitvec 5
533 concat 532 6 531
534 uext 8 533 59
535 srl 8 9 534
536 slice 1 535 0 0
537 ite 1 182 536 528
538 output 537 O5 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:42.10-42.12
539 input 1
540 input 1
541 redor 1 9
542 not 1 541
543 redand 1 9
544 or 1 542 543
545 ite 1 544 540 167
546 input 1
547 xor 1 179 7
548 eq 1 547 24
549 eq 1 547 22
550 or 1 548 549
551 ite 1 550 546 545
552 input 1
553 ite 1 544 552 279
554 input 1
555 ite 1 550 554 553
556 input 1
557 ite 1 544 556 379
558 input 1
559 ite 1 550 558 557
560 input 1
561 ite 1 544 560 479
562 input 1
563 ite 1 550 562 561
564 input 1
565 slice 13 9 39 32
566 uext 13 18 5
567 srl 13 565 566
568 slice 1 567 0 0
569 uext 13 28 5
570 srl 13 565 569
571 slice 1 570 0 0
572 eq 1 568 571
573 and 1 26 572
574 uext 13 35 5
575 srl 13 565 574
576 slice 1 575 0 0
577 eq 1 568 576
578 and 1 573 577
579 uext 13 42 5
580 srl 13 565 579
581 slice 1 580 0 0
582 eq 1 568 581
583 and 1 578 582
584 ite 1 583 568 564
585 uext 13 49 6
586 srl 13 565 585
587 slice 1 586 0 0
588 uext 13 56 6
589 srl 13 565 588
590 slice 1 589 0 0
591 eq 1 587 590
592 and 1 55 591
593 uext 13 63 5
594 srl 13 565 593
595 slice 1 594 0 0
596 eq 1 587 595
597 and 1 592 596
598 uext 13 70 5
599 srl 13 565 598
600 slice 1 599 0 0
601 eq 1 587 600
602 and 1 597 601
603 ite 1 602 587 584
604 uext 13 2 7
605 srl 13 565 604
606 slice 1 605 0 0
607 uext 13 83 6
608 srl 13 565 607
609 slice 1 608 0 0
610 eq 1 606 609
611 and 1 82 610
612 uext 13 89 5
613 srl 13 565 612
614 slice 1 613 0 0
615 eq 1 606 614
616 and 1 611 615
617 uext 13 95 5
618 srl 13 565 617
619 slice 1 618 0 0
620 eq 1 606 619
621 and 1 616 620
622 ite 1 621 606 603
623 uext 13 103 5
624 srl 13 565 623
625 slice 1 624 0 0
626 uext 13 112 5
627 srl 13 565 626
628 slice 1 627 0 0
629 eq 1 625 628
630 and 1 110 629
631 ite 1 630 625 622
632 uext 13 120 5
633 srl 13 565 632
634 slice 1 633 0 0
635 uext 13 129 5
636 srl 13 565 635
637 slice 1 636 0 0
638 eq 1 634 637
639 and 1 127 638
640 ite 1 639 634 631
641 uext 13 136 6
642 srl 13 565 641
643 slice 1 642 0 0
644 uext 13 145 5
645 srl 13 565 644
646 slice 1 645 0 0
647 eq 1 643 646
648 and 1 143 647
649 ite 1 648 643 640
650 slice 1 9 32 32
651 redor 1 565
652 not 1 651
653 redand 1 565
654 or 1 652 653
655 ite 1 654 650 649
656 uext 13 159 5
657 srl 13 565 656
658 slice 1 657 0 0
659 ite 1 166 658 655
660 input 1
661 ite 1 544 660 659
662 input 1
663 ite 1 550 662 661
664 input 1
665 slice 13 9 47 40
666 uext 13 18 5
667 srl 13 665 666
668 slice 1 667 0 0
669 uext 13 28 5
670 srl 13 665 669
671 slice 1 670 0 0
672 eq 1 668 671
673 and 1 26 672
674 uext 13 35 5
675 srl 13 665 674
676 slice 1 675 0 0
677 eq 1 668 676
678 and 1 673 677
679 uext 13 42 5
680 srl 13 665 679
681 slice 1 680 0 0
682 eq 1 668 681
683 and 1 678 682
684 ite 1 683 668 664
685 uext 13 49 6
686 srl 13 665 685
687 slice 1 686 0 0
688 uext 13 56 6
689 srl 13 665 688
690 slice 1 689 0 0
691 eq 1 687 690
692 and 1 55 691
693 uext 13 63 5
694 srl 13 665 693
695 slice 1 694 0 0
696 eq 1 687 695
697 and 1 692 696
698 uext 13 70 5
699 srl 13 665 698
700 slice 1 699 0 0
701 eq 1 687 700
702 and 1 697 701
703 ite 1 702 687 684
704 uext 13 2 7
705 srl 13 665 704
706 slice 1 705 0 0
707 uext 13 83 6
708 srl 13 665 707
709 slice 1 708 0 0
710 eq 1 706 709
711 and 1 82 710
712 uext 13 89 5
713 srl 13 665 712
714 slice 1 713 0 0
715 eq 1 706 714
716 and 1 711 715
717 uext 13 95 5
718 srl 13 665 717
719 slice 1 718 0 0
720 eq 1 706 719
721 and 1 716 720
722 ite 1 721 706 703
723 uext 13 103 5
724 srl 13 665 723
725 slice 1 724 0 0
726 uext 13 112 5
727 srl 13 665 726
728 slice 1 727 0 0
729 eq 1 725 728
730 and 1 110 729
731 ite 1 730 725 722
732 uext 13 120 5
733 srl 13 665 732
734 slice 1 733 0 0
735 uext 13 129 5
736 srl 13 665 735
737 slice 1 736 0 0
738 eq 1 734 737
739 and 1 127 738
740 ite 1 739 734 731
741 uext 13 136 6
742 srl 13 665 741
743 slice 1 742 0 0
744 uext 13 145 5
745 srl 13 665 744
746 slice 1 745 0 0
747 eq 1 743 746
748 and 1 143 747
749 ite 1 748 743 740
750 slice 1 9 40 40
751 redor 1 665
752 not 1 751
753 redand 1 665
754 or 1 752 753
755 ite 1 754 750 749
756 uext 13 159 5
757 srl 13 665 756
758 slice 1 757 0 0
759 ite 1 166 758 755
760 input 1
761 ite 1 544 760 759
762 input 1
763 ite 1 550 762 761
764 input 1
765 slice 13 9 55 48
766 uext 13 18 5
767 srl 13 765 766
768 slice 1 767 0 0
769 uext 13 28 5
770 srl 13 765 769
771 slice 1 770 0 0
772 eq 1 768 771
773 and 1 26 772
774 uext 13 35 5
775 srl 13 765 774
776 slice 1 775 0 0
777 eq 1 768 776
778 and 1 773 777
779 uext 13 42 5
780 srl 13 765 779
781 slice 1 780 0 0
782 eq 1 768 781
783 and 1 778 782
784 ite 1 783 768 764
785 uext 13 49 6
786 srl 13 765 785
787 slice 1 786 0 0
788 uext 13 56 6
789 srl 13 765 788
790 slice 1 789 0 0
791 eq 1 787 790
792 and 1 55 791
793 uext 13 63 5
794 srl 13 765 793
795 slice 1 794 0 0
796 eq 1 787 795
797 and 1 792 796
798 uext 13 70 5
799 srl 13 765 798
800 slice 1 799 0 0
801 eq 1 787 800
802 and 1 797 801
803 ite 1 802 787 784
804 uext 13 2 7
805 srl 13 765 804
806 slice 1 805 0 0
807 uext 13 83 6
808 srl 13 765 807
809 slice 1 808 0 0
810 eq 1 806 809
811 and 1 82 810
812 uext 13 89 5
813 srl 13 765 812
814 slice 1 813 0 0
815 eq 1 806 814
816 and 1 811 815
817 uext 13 95 5
818 srl 13 765 817
819 slice 1 818 0 0
820 eq 1 806 819
821 and 1 816 820
822 ite 1 821 806 803
823 uext 13 103 5
824 srl 13 765 823
825 slice 1 824 0 0
826 uext 13 112 5
827 srl 13 765 826
828 slice 1 827 0 0
829 eq 1 825 828
830 and 1 110 829
831 ite 1 830 825 822
832 uext 13 120 5
833 srl 13 765 832
834 slice 1 833 0 0
835 uext 13 129 5
836 srl 13 765 835
837 slice 1 836 0 0
838 eq 1 834 837
839 and 1 127 838
840 ite 1 839 834 831
841 uext 13 136 6
842 srl 13 765 841
843 slice 1 842 0 0
844 uext 13 145 5
845 srl 13 765 844
846 slice 1 845 0 0
847 eq 1 843 846
848 and 1 143 847
849 ite 1 848 843 840
850 slice 1 9 48 48
851 redor 1 765
852 not 1 851
853 redand 1 765
854 or 1 852 853
855 ite 1 854 850 849
856 uext 13 159 5
857 srl 13 765 856
858 slice 1 857 0 0
859 ite 1 166 858 855
860 input 1
861 ite 1 544 860 859
862 input 1
863 ite 1 550 862 861
864 input 1
865 slice 13 9 63 56
866 uext 13 18 5
867 srl 13 865 866
868 slice 1 867 0 0
869 uext 13 28 5
870 srl 13 865 869
871 slice 1 870 0 0
872 eq 1 868 871
873 and 1 26 872
874 uext 13 35 5
875 srl 13 865 874
876 slice 1 875 0 0
877 eq 1 868 876
878 and 1 873 877
879 uext 13 42 5
880 srl 13 865 879
881 slice 1 880 0 0
882 eq 1 868 881
883 and 1 878 882
884 ite 1 883 868 864
885 uext 13 49 6
886 srl 13 865 885
887 slice 1 886 0 0
888 uext 13 56 6
889 srl 13 865 888
890 slice 1 889 0 0
891 eq 1 887 890
892 and 1 55 891
893 uext 13 63 5
894 srl 13 865 893
895 slice 1 894 0 0
896 eq 1 887 895
897 and 1 892 896
898 uext 13 70 5
899 srl 13 865 898
900 slice 1 899 0 0
901 eq 1 887 900
902 and 1 897 901
903 ite 1 902 887 884
904 uext 13 2 7
905 srl 13 865 904
906 slice 1 905 0 0
907 uext 13 83 6
908 srl 13 865 907
909 slice 1 908 0 0
910 eq 1 906 909
911 and 1 82 910
912 uext 13 89 5
913 srl 13 865 912
914 slice 1 913 0 0
915 eq 1 906 914
916 and 1 911 915
917 uext 13 95 5
918 srl 13 865 917
919 slice 1 918 0 0
920 eq 1 906 919
921 and 1 916 920
922 ite 1 921 906 903
923 uext 13 103 5
924 srl 13 865 923
925 slice 1 924 0 0
926 uext 13 112 5
927 srl 13 865 926
928 slice 1 927 0 0
929 eq 1 925 928
930 and 1 110 929
931 ite 1 930 925 922
932 uext 13 120 5
933 srl 13 865 932
934 slice 1 933 0 0
935 uext 13 129 5
936 srl 13 865 935
937 slice 1 936 0 0
938 eq 1 934 937
939 and 1 127 938
940 ite 1 939 934 931
941 uext 13 136 6
942 srl 13 865 941
943 slice 1 942 0 0
944 uext 13 145 5
945 srl 13 865 944
946 slice 1 945 0 0
947 eq 1 943 946
948 and 1 143 947
949 ite 1 948 943 940
950 slice 1 9 56 56
951 redor 1 865
952 not 1 951
953 redand 1 865
954 or 1 952 953
955 ite 1 954 950 949
956 uext 13 159 5
957 srl 13 865 956
958 slice 1 957 0 0
959 ite 1 166 958 955
960 input 1
961 ite 1 544 960 959
962 input 1
963 ite 1 550 962 961
964 concat 15 555 551
965 concat 17 559 964
966 concat 11 563 965
967 concat 532 663 966
968 sort bitvec 6
969 concat 968 763 967
970 sort bitvec 7
971 concat 970 863 969
972 concat 13 963 971
973 concat 17 7 16
974 uext 13 973 5
975 srl 13 972 974
976 slice 1 975 0 0
977 eq 1 7 22
978 eq 1 7 24
979 or 1 977 978
980 concat 17 7 27
981 uext 13 980 5
982 srl 13 972 981
983 slice 1 982 0 0
984 eq 1 976 983
985 and 1 979 984
986 concat 17 7 34
987 uext 13 986 5
988 srl 13 972 987
989 slice 1 988 0 0
990 eq 1 976 989
991 and 1 985 990
992 concat 17 7 41
993 uext 13 992 5
994 srl 13 972 993
995 slice 1 994 0 0
996 eq 1 976 995
997 and 1 991 996
998 ite 1 997 976 539
999 uext 13 487 6
1000 srl 13 972 999
1001 slice 1 1000 0 0
1002 uext 13 494 6
1003 srl 13 972 1002
1004 slice 1 1003 0 0
1005 eq 1 1001 1004
1006 and 1 493 1005
1007 concat 15 6 24
1008 concat 17 22 1007
1009 uext 13 1008 5
1010 srl 13 972 1009
1011 slice 1 1010 0 0
1012 eq 1 1001 1011
1013 and 1 1006 1012
1014 concat 15 6 22
1015 concat 17 22 1014
1016 uext 13 1015 5
1017 srl 13 972 1016
1018 slice 1 1017 0 0
1019 eq 1 1001 1018
1020 and 1 1013 1019
1021 ite 1 1020 1001 998
1022 uext 13 5 7
1023 srl 13 972 1022
1024 slice 1 1023 0 0
1025 uext 13 507 6
1026 srl 13 972 1025
1027 slice 1 1026 0 0
1028 eq 1 1024 1027
1029 and 1 506 1028
1030 concat 17 34 5
1031 uext 13 1030 5
1032 srl 13 972 1031
1033 slice 1 1032 0 0
1034 eq 1 1024 1033
1035 and 1 1029 1034
1036 concat 17 41 5
1037 uext 13 1036 5
1038 srl 13 972 1037
1039 slice 1 1038 0 0
1040 eq 1 1024 1039
1041 and 1 1035 1040
1042 ite 1 1041 1024 1021
1043 concat 15 6 24
1044 concat 17 7 1043
1045 uext 13 1044 5
1046 srl 13 972 1045
1047 slice 1 1046 0 0
1048 xor 1 7 6
1049 eq 1 1048 22
1050 eq 1 1048 24
1051 or 1 1049 1050
1052 concat 15 6 22
1053 concat 17 7 1052
1054 uext 13 1053 5
1055 srl 13 972 1054
1056 slice 1 1055 0 0
1057 eq 1 1047 1056
1058 and 1 1051 1057
1059 ite 1 1058 1047 1042
1060 concat 15 24 5
1061 concat 17 7 1060
1062 uext 13 1061 5
1063 srl 13 972 1062
1064 slice 1 1063 0 0
1065 xor 1 7 5
1066 eq 1 1065 22
1067 eq 1 1065 24
1068 or 1 1066 1067
1069 concat 15 22 5
1070 concat 17 7 1069
1071 uext 13 1070 5
1072 srl 13 972 1071
1073 slice 1 1072 0 0
1074 eq 1 1064 1073
1075 and 1 1068 1074
1076 ite 1 1075 1064 1059
1077 uext 13 519 6
1078 srl 13 972 1077
1079 slice 1 1078 0 0
1080 concat 15 6 5
1081 concat 17 22 1080
1082 uext 13 1081 5
1083 srl 13 972 1082
1084 slice 1 1083 0 0
1085 eq 1 1079 1084
1086 and 1 526 1085
1087 ite 1 1086 1079 1076
1088 redor 1 972
1089 not 1 1088
1090 redand 1 972
1091 or 1 1089 1090
1092 ite 1 1091 551 1087
1093 concat 15 6 5
1094 concat 17 7 1093
1095 uext 13 1094 5
1096 srl 13 972 1095
1097 slice 1 1096 0 0
1098 xor 1 1048 5
1099 eq 1 1098 22
1100 eq 1 1098 24
1101 or 1 1099 1100
1102 ite 1 1101 1097 1092
1103 ite 1 544 152 1102
1104 concat 15 3 2
1105 concat 17 4 1104
1106 concat 11 5 1105
1107 concat 532 6 1106
1108 concat 968 7 1107
1109 uext 8 1108 58
1110 srl 8 9 1109
1111 slice 1 1110 0 0
1112 ite 1 550 1111 1103
1113 output 1112 O6 ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:43.10-43.12
1114 uext 8 9 0 INIT_REG ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:59.14-59.22
1115 uext 1 537 0 O5_out ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:64.7-64.13
1116 uext 1 1112 0 O6_out ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:65.7-65.13
1117 input 11
1118 uext 11 1117 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:130$5.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:71.15-71.16
1119 input 15
1120 uext 15 1119 0 lut_mux4_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:130$5.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:72.15-72.16
1121 input 13
1122 uext 13 1121 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:130$4.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1123 input 17
1124 uext 17 1123 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:130$4.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1125 input 13
1126 uext 13 1125 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:131$3.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1127 input 17
1128 uext 17 1127 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:131$3.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1129 input 13
1130 uext 13 1129 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:132$2.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1131 input 17
1132 uext 17 1131 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:132$2.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1133 input 13
1134 uext 13 1133 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:133$1.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1135 input 17
1136 uext 17 1135 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:133$1.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1137 input 13
1138 uext 13 1137 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:142$13.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1139 input 17
1140 uext 17 1139 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:142$13.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1141 input 13
1142 uext 13 1141 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:142$14.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1143 input 17
1144 uext 17 1143 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:142$14.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1145 input 13
1146 uext 13 1145 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:143$12.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1147 input 17
1148 uext 17 1147 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:143$12.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1149 input 13
1150 uext 13 1149 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:144$11.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1151 input 17
1152 uext 17 1151 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:144$11.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1153 input 13
1154 uext 13 1153 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:145$10.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1155 input 17
1156 uext 17 1155 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:145$10.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1157 input 13
1158 uext 13 1157 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:146$9.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1159 input 17
1160 uext 17 1159 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:146$9.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1161 input 13
1162 uext 13 1161 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:147$8.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1163 input 17
1164 uext 17 1163 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:147$8.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1165 input 13
1166 uext 13 1165 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:148$7.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1167 input 17
1168 uext 17 1167 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:148$7.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1169 input 13
1170 uext 13 1169 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:149$6.d ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:88.15-88.16
1171 input 17
1172 uext 17 1171 0 lut_mux8_f$func$/var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:149$6.s ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:89.15-89.16
1173 uext 1 24 0 trig_attr ; /var/folders/sn/pdf_xchx1ts04qtq3thd9s1c0000gn/T/tmptn2iv71n:56.7-56.16
; end of yosys output
here-string-delimiter
        ;
        ))

     (match-define (hash-table ("O5" O5) ("O6" O6)) outs)
     (match-define (hash-table ("I0" I0)
                               ("I1" I1)
                               ("I2" I2)
                               ("I3" I3)
                               ("I4" I4)
                               ("I5" I5)
                               ("INIT" INIT))
       ins)

     (check-equal?
      (verify (begin
                (match-define (list lrO5 lrO6)
                  (interpret `(ultrascale-plus-lut6-2
                               ,INIT
                               (concat ,I5 (concat ,I4 (concat ,I3 (concat ,I2 (concat ,I1 ,I0))))))))
                (assert (bveq O5 lrO5))
                (assert (bveq O6 lrO6))))
      (unsat)))))

(require "stateful-design-experiment.rkt")

(define (parse-btor-new str)

  ;;; Maps ids (number) to signals.
  (define h (make-hash))
  (define (get id)
    (hash-ref h id))
  (define (get-str id-str)
    (get (string->number id-str)))

  ;;; Input signals.
  (define ins (list))

  ;;; Outputs. Maps name (string) to id in h of the expression defining the output.
  (define outs (make-hash))

  ;;; States. Maps ids (integers) to signals.
  (define state (make-hash))

  ;;; Maps IDs to state symbols.
  (define state-symbols (make-hash))

  ;;; Maps state symbols to state types.
  (define state-types (make-hash))

  ;;; The state collected from the input.
  (define input-state (make-hash))

  (define output-state (make-hash))

  ;;; Maps input symbol to type.
  (define input-types (make-hash))

  ;;; Initial values of states. Maps state symbol (e.g. 'state0) to expression representing the state
  ;;; value.
  (define init-states (make-hash))

  (for ([line (filter (lambda (line) (not (equal? #\; (string-ref line 0))))
                      (string-split str #rx"\n+"))])
    (match-let* ([line (first (string-split line ";"))] ;;; Remove comments.
                 [(cons id-str tokens) (string-split line)]
                 [id (string->number id-str)])
      (match tokens
        [`("next" ,sort-id-str ,state-id-str ,next-val-id-str)
         ;;; A next statement determines the value of the state var that we return out.
         ;;; We build a hash map that maps state symbols (e.g. 'state0) to the expressions that convey
         ;;; the output value for the state.
         (hash-set! output-state
                    (hash-ref state-symbols (string->number state-id-str))
                    (get-str next-val-id-str))
         ;;; We don't put anything in h for next statements.
         ]
        [`("init" ,sort-id-str ,state-id-str ,val-id-str)

         (hash-set! init-states
                    (hash-ref state-symbols (string->number state-id-str))
                    (get-str val-id-str))]
        [`("state" ,sort-id-str)
         ;;; It should draw from the incoming state. But how? The problem is that, with our current
         ;;; setup, i think you have to get the state value from a "nearby" signal that's also in
         ;;; context. Does there need to be some kind of top level wrapper that holds state? state can
         ;;; only be associated with values, but that doesn't make sense. what about a module that
         ;;; takes no inputs (not even a clock) and yet has a state? Does that make sense? does it make
         ;;; sense? I think that thing can only be a constant. If it doesn't take an input, there's
         ;;; nothing to trigger internal state difference. A register doesn't work without a clock. if
         ;;; you have a register, you need a clock, or the register won't function. You can have a
         ;;; combinational loop, but that doesn't really make much sense in our framework. Or, it
         ;;; could, but i guess it depends on what level we consider state changes as happening. For
         ;;; the most part, I guess it's on the callee to determine what state they care to track.

         ;;; The value is either
         ;;;
         ;;; - the lookup of the state id in the state dictionary, or
         ;;;
         ;;; - the init value, if it's not there.
         ;;;
         ;;; But what is the state dictionary? this is a context-dependent thing, isn't it?
         ;;;
         ;;; So I think there's a dict that we build up from a merger of the state values on the inputs
         ;;; to the module, and then that's the dictionary we'd use here. So if there's no inputs,
         ;;; there's no state. Does that make sense? State without input is a constant? I guess so.
         ;;; it would always be the init value, or if there's no init value...well idk.
         (let* ([name-symbol (string->symbol (format "state~a" id))])
           ;;; From the collection of inputs, find the state value by name and convert it to a signal.
           ;;; TODO handle init values.
           ;;; TODO handle names.
           (hash-set! state-symbols id name-symbol)
           (hash-set! state-types name-symbol (get-str sort-id-str))
           (hash-set! h id `(get-state ,ins ,name-symbol)))]
        [`("sort" "bitvec" ,width-str) (hash-set! h id (bitvector (string->number width-str)))]
        ;;; Sometimes the .btor files contain inputs without names. I'm unsure what these are. We just
        ;;; ignore them for now.
        [`("input" ,type-id-str)
         (set! ins (append ins (list (string->symbol (format "unnamed-input-~a" id)))))
         (hash-set! input-types (string->symbol (format "unnamed-input-~a" id)) (get-str type-id-str))
         (hash-set! h id (string->symbol (format "unnamed-input-~a" id)))]
        ;;; A named input should get a symbol representing it. That symbol will be looked up in the
        ;;; call to the interpreter. We also actually don't do anything with the type anymore---we
        ;;; could use it to do type checking, but for now we'll ignore it.
        [`("input" ,type-id-str ,name)
         (set! ins (append ins (list (string->symbol name))))
         (hash-set! input-types (string->symbol name) (get-str type-id-str))
         (hash-set! h id (string->symbol name))]
        [`("const" ,type-id-str ,value-str)
         (let* ([type (get-str type-id-str)] [value (string->number value-str 2)])
           (hash-set! h id (bv->signal (bv value type))))]
        [`("ite" ,type-id-str ,cond-id-str ,true-val-id-str ,false-val-id-str)
         (let ([true-val (get-str true-val-id-str)]
               [false-val (get-str false-val-id-str)]
               [cond-val (get-str cond-id-str)])
           (hash-set! h id `(if ,cond-val ,true-val ,false-val)))]
        [`("slice" ,type-id-str ,val-id-str ,u-str ,l-str)
         (let ([signal (get-str val-id-str)])
           (hash-set! h id `(extract ,(string->number u-str) ,(string->number l-str) ,signal)))]
        [`("output" ,id-str ,name)
         (hash-set! outs (string->symbol name) (string->number id-str))
         ;;;(hash-set! h id (get-str id-str))
         ]
        [`("uext" ,out-type-id-str ,in-id-str ,_ ...)
         (let ([signal (get-str in-id-str)])
           (hash-set! h id `(zero-extend ,signal ,(get-str out-type-id-str))))]
        [`("concat" ,out-type-id-str ,a-id-str ,b-id-str)
         (let ([a-signal (get-str a-id-str)] [b-signal (get-str b-id-str)])
           (hash-set! h id `(concat ,a-signal ,b-signal)))]
        [`("add" ,out-type-id-str ,a-id-str ,b-id-str)
         (let ([a-signal (get-str a-id-str)] [b-signal (get-str b-id-str)])
           (hash-set! h id `(bvadd ,a-signal ,b-signal)))]
        [`("xor" ,out-type-id-str ,a-id-str ,b-id-str)
         (let ([a-signal (get-str a-id-str)] [b-signal (get-str b-id-str)])
           (hash-set! h id `(bvxor ,a-signal ,b-signal)))]
        [`("and" ,out-type-id-str ,a-id-str ,b-id-str)
         (let ([a-signal (get-str a-id-str)] [b-signal (get-str b-id-str)])
           (hash-set! h id `(bvand ,a-signal ,b-signal)))]
        [`("sub" ,out-type-id-str ,a-id-str ,b-id-str)
         (let ([a-signal (get-str a-id-str)] [b-signal (get-str b-id-str)])
           (hash-set! h id `(bvsub ,a-signal ,b-signal)))]
        [`("or" ,out-type-id-str ,a-id-str ,b-id-str)
         (let ([a-signal (get-str a-id-str)] [b-signal (get-str b-id-str)])
           (hash-set! h id `(bvor ,a-signal ,b-signal)))]
        [`("redor" ,out-type-id-str ,in-id-str) (hash-set! h id `(redor ,(get-str in-id-str)))]
        [`("redxor" ,out-type-id-str ,in-id-str) (hash-set! h id `(redxor ,(get-str in-id-str)))]
        [`("mul" ,out-type-id-str ,a-id-str ,b-id-str)
         (let ([a-signal (get-str a-id-str)] [b-signal (get-str b-id-str)])
           (hash-set! h id `(bvmul ,a-signal ,b-signal)))]
        [`("redand" ,out-type-id-str ,in-id-str) (hash-set! h id `(redand ,(get-str in-id-str)))]
        [`("not" ,out-type-id-str ,in-id-str)
         (let ([signal (get-str in-id-str)]) (hash-set! h id `(bvnot ,signal)))]
        [`("eq" ,out-type-id-str ,a-id-str ,b-id-str)
         (let ([a (get-str a-id-str)] [b (get-str b-id-str)]) (hash-set! h id `(bveq ,a ,b)))]
        [`("neq" ,out-type-id-str ,a-id-str ,b-id-str)
         (let ([a (get-str a-id-str)] [b (get-str b-id-str)])
           (hash-set! h id `(bvnot (bveq ,a ,b))))])))

  ;;; Update outputs to have new output states.
  (define new-outs
    (foldl (λ (k new-outs)
             (hash-set new-outs k `(set-state ,(hash-ref h (hash-ref outs k)) ,output-state)))
           (hash)
           (hash-keys outs)))

  ;;; Fill in 0s for all states that don't have initial values. This may be a bad default. I think
  ;;; these states are produced by Yosys when X values are present, but it also seems like they
  ;;; come up when DFF or memories are present.
  ;;;
  ;;; TODO(@gussmith23) Is this a good idea?
  (define init-full
    (hash-union
     (make-immutable-hash (hash->list init-states))
     ;;; Get all the keys that don't have init values, set them to 0 (of the correct type) and make
     ;;; a hash out of them.
     (make-immutable-hash (map (λ (key) (cons key (bv->signal (bv 0 (hash-ref state-types key)))))
                               (filter (λ (key) (not (hash-has-key? init-states key)))
                                       (hash-values state-symbols))))))

  (list ins new-outs init-full output-state (hash-values state-symbols) state-types input-types))

;;; Expressions all have signal values.
;;;
;;; expr: Expression to be interpreted.
;;;
;;; env: Maps symbols to expressions.
;;;
;;; init: Maps symbols to bitvectors. Initial values of states.
(define (new-interpreter expr env init)
  (define memo-hash (make-hash))

  (define (new-interpreter expr env init)
    (if (hash-has-key? memo-hash expr)
        (hash-ref memo-hash expr)
        (begin
          (define out
            (match expr
              [`(set-state ,signal-expr ,(? hash? state-hash))
               (let* ([s (new-interpreter signal-expr env init)]
                      [new-state
                       (foldl (λ (k new-state)
                                (hash-set new-state
                                          k
                                          (signal-value
                                           (new-interpreter (hash-ref state-hash k) env init))))
                              (hash)
                              (hash-keys state-hash))])
                 (signal (signal-value s) new-state))]
              ;;; Get a state value from the merged states of the provided list of signals. Otherwise, use
              ;;; the initial value of the state.
              ;;;
              ;;; We can also implement this for the case of a single signal expr, I just haven't needed it
              ;;; yet.
              ;;;
              ;;; Returns the value of the state as a signal without any state attached.
              [`(get-state ,(? list? signal-exprs-list) ,(? symbol? state-symbol))
               (let* ([signals-list (map (λ (signal-expr) (new-interpreter signal-expr env init))
                                         signal-exprs-list)]
                      [merged-state (merge-state signals-list)]
                      [state-value
                       (if (hash-has-key? merged-state state-symbol)
                           ;;; TODO this seems kinda messy: if the state is in the merged-state hashtable,
                           ;;; it's a bv; if it's not and we have to resort to init, then it's a signal. If
                           ;;; it's a bv, we have to convert it to signal. Feels like the types aren't
                           ;;; lining up cleanly.
                           (bv->signal (hash-ref merged-state state-symbol))
                           (hash-ref init state-symbol))])
                 (when (not (signal? state-value))
                   (error "Expected signal"))
                 (when (not (bv? (signal-value state-value)))
                   (error "Signal value invalid"))
                 state-value)]

              [`(if ,cond-expr ,true-expr ,false-expr)
               (if (bitvector->bool (signal-value (new-interpreter cond-expr env init)))
                   (new-interpreter true-expr env init)
                   (new-interpreter false-expr env init))]
              [`(bveq ,a ,b)
               (let* ([a (new-interpreter a env init)] [b (new-interpreter b env init)])
                 (signal (bool->bitvector (bveq (signal-value a) (signal-value b)))
                         (merge-state (list a b))))]
              [`(bvadd ,a ,b)
               (let* ([a (new-interpreter a env init)] [b (new-interpreter b env init)])
                 (signal (bvadd (signal-value a) (signal-value b)) (merge-state (list a b))))]
              [`(bvand ,a ,b)
               (let* ([a (new-interpreter a env init)] [b (new-interpreter b env init)])
                 (signal (bvand (signal-value a) (signal-value b)) (merge-state (list a b))))]
              [`(bvor ,a ,b)
               (let* ([a (new-interpreter a env init)] [b (new-interpreter b env init)])
                 (signal (bvor (signal-value a) (signal-value b)) (merge-state (list a b))))]
              [`(bvxor ,a ,b)
               (let* ([a (new-interpreter a env init)] [b (new-interpreter b env init)])
                 (signal (bvxor (signal-value a) (signal-value b)) (merge-state (list a b))))]
              [`(bvmul ,a ,b)
               (let* ([a (new-interpreter a env init)] [b (new-interpreter b env init)])
                 (signal (bvmul (signal-value a) (signal-value b)) (merge-state (list a b))))]
              [`(bvsub ,a ,b)
               (let* ([a (new-interpreter a env init)] [b (new-interpreter b env init)])
                 (signal (bvsub (signal-value a) (signal-value b)) (merge-state (list a b))))]
              [`(bvnot ,a)
               (let* ([a (new-interpreter a env init)])
                 (signal (bvnot (signal-value a)) (signal-state a)))]
              [`(zero-extend ,val ,type)
               (let* ([val (new-interpreter val env init)] [type (new-interpreter type env init)])
                 (bv->signal (zero-extend (signal-value val) type) val))]
              [`(concat ,a ,b)
               (let* ([a (new-interpreter a env init)] [b (new-interpreter b env init)])
                 (signal (concat (signal-value a) (signal-value b)) (merge-state (list a b))))]
              [`(extract ,hi ,lo ,sig)
               (let* ([sig (new-interpreter sig env init)])
                 (signal (extract hi lo (signal-value sig)) (signal-state sig)))]
              [`(redor ,a)
               (let* ([a (new-interpreter a env init)])
                 (signal (apply bvor (bitvector->bits (signal-value a))) (signal-state a)))]
              [`(redand ,a)
               (let* ([a (new-interpreter a env init)])
                 (signal (apply bvand (bitvector->bits (signal-value a))) (signal-state a)))]
              [`(redxor ,a)
               (let* ([a (new-interpreter a env init)])
                 (signal (apply bvxor (bitvector->bits (signal-value a))) (signal-state a)))]
              [(? signal?) expr]
              [(? symbol?) (hash-ref env expr)]
              [(? integer? n) n]
              [(? bitvector?) expr]))
          (hash-set! memo-hash expr out)

          out)))

  (new-interpreter expr env init))

(module+ test
  (require racket/hash
           racket/contract)

  (test-case
   "Parse and verify a stateful design"
   (begin

     (match-define (list '(clk rst)
                         (hash-table ('out out-expr))
                         init
                         next
                         state-symbols
                         state-types
                         input-types)
       (parse-btor-new
        #<<here-string-delimiter
1 sort bitvec 1
2 input 1 clk
3 input 1 rst
4 sort bitvec 8
5 const 4 00000000
6 state 4
7 init 4 6 5
8 state 4
9 init 4 8 5
10 const 1 1
11 state 1
12 init 1 11 10
13 sort bitvec 2
14 concat 13 2 11
15 const 13 10
16 eq 1 14 15
17 ite 4 16 8 6
18 output 17 out
19 uext 4 10 7
20 add 4 17 19
21 uext 4 20 0 counter_incremented
22 uext 4 17 0 counter_reg
23 next 4 6 17
24 ite 4 3 5 20
25 next 4 8 24
26 next 1 11 2
here-string-delimiter
        ;
        ))
     (let* ([o0 (new-interpreter out-expr
                                 (hash 'clk (bv->signal (bv 0 1)) 'rst (bv->signal (bv 0 1)))
                                 init)]
            [o1 (new-interpreter out-expr
                                 (hash 'clk (bv->signal (bv 1 1) o0) 'rst (bv->signal (bv 0 1) o0))
                                 init)]
            [o2 (new-interpreter out-expr
                                 (hash 'clk (bv->signal (bv 0 1) o1) 'rst (bv->signal (bv 0 1) o1))
                                 init)]
            [o3 (new-interpreter out-expr
                                 (hash 'clk (bv->signal (bv 1 1) o2) 'rst (bv->signal (bv 0 1) o2))
                                 init)]
            [o4 (new-interpreter out-expr
                                 (hash 'clk (bv->signal (bv 0 1) o3) 'rst (bv->signal (bv 0 1) o3))
                                 init)]
            [o5 (new-interpreter out-expr
                                 (hash 'clk (bv->signal (bv 1 1) o4) 'rst (bv->signal (bv 0 1) o4))
                                 init)]
            [o6 (new-interpreter out-expr
                                 (hash 'clk (bv->signal (bv 0 1) o5) 'rst (bv->signal (bv 0 1) o5))
                                 init)]
            [o7 (new-interpreter out-expr
                                 (hash 'clk (bv->signal (bv 1 1) o6) 'rst (bv->signal (bv 0 1) o6))
                                 init)])
       (check-equal? (signal-value o0) (bv 0 8))
       (check-equal? (signal-value o1) (bv 1 8))
       (check-equal? (signal-value o2) (bv 1 8))
       (check-equal? (signal-value o3) (bv 2 8))
       (check-equal? (signal-value o4) (bv 2 8))
       (check-equal? (signal-value o5) (bv 3 8))
       (check-equal? (signal-value o6) (bv 3 8))
       (check-equal? (signal-value o7) (bv 4 8))))))

(module+ test
  (require rosette/lib/synthax)
  (test-case
   "Parse DSP48E2"
   (begin
     (error-print-width 5000)
     (match-define (list (list 'A
                               'ACASCREG
                               'ACIN
                               'ADREG
                               'ALUMODE
                               'ALUMODEREG
                               'AMULTSEL
                               'AREG
                               'AUTORESET_PATDET
                               'AUTORESET_PRIORITY
                               'A_INPUT
                               'B
                               'BCASCREG
                               'BCIN
                               'BMULTSEL
                               'BREG
                               'B_INPUT
                               'C
                               'CARRYCASCIN
                               'CARRYIN
                               'CARRYINREG
                               'CARRYINSEL
                               'CARRYINSELREG
                               'CEA1
                               'CEA2
                               'CEAD
                               'CEALUMODE
                               'CEB1
                               'CEB2
                               'CEC
                               'CECARRYIN
                               'CECTRL
                               'CED
                               'CEINMODE
                               'CEM
                               'CEP
                               'CLK
                               'CREG
                               'D
                               'DREG
                               'INMODE
                               'INMODEREG
                               'IS_ALUMODE_INVERTED
                               'IS_CARRYIN_INVERTED
                               'IS_CLK_INVERTED
                               'IS_INMODE_INVERTED
                               'IS_OPMODE_INVERTED
                               'IS_RSTALLCARRYIN_INVERTED
                               'IS_RSTALUMODE_INVERTED
                               'IS_RSTA_INVERTED
                               'IS_RSTB_INVERTED
                               'IS_RSTCTRL_INVERTED
                               'IS_RSTC_INVERTED
                               'IS_RSTD_INVERTED
                               'IS_RSTINMODE_INVERTED
                               'IS_RSTM_INVERTED
                               'IS_RSTP_INVERTED
                               'MASK
                               'MREG
                               'MULTSIGNIN
                               'OPMODE
                               'OPMODEREG
                               'PATTERN
                               'PCIN
                               'PREADDINSEL
                               'PREG
                               'RND
                               'RSTA
                               'RSTALLCARRYIN
                               'RSTALUMODE
                               'RSTB
                               'RSTC
                               'RSTCTRL
                               'RSTD
                               'RSTINMODE
                               'RSTM
                               'RSTP
                               'SEL_MASK
                               'SEL_PATTERN
                               'USE_MULT
                               'USE_PATTERN_DETECT
                               'USE_SIMD
                               'USE_WIDEXOR
                               'XORSIMD
                               'unnamed-input-531
                               'unnamed-input-897
                               'unnamed-input-1274
                               'unnamed-input-1331
                               'unnamed-input-1375)
                         (hash-table ('PATTERNDETECT PATTERNDETECT)
                                     ('ACOUT ACOUT)
                                     ('BCOUT BCOUT)
                                     ('OVERFLOW OVERFLOW)
                                     ('CARRYOUT CARRYOUT)
                                     ('XOROUT XOROUT)
                                     ('MULTSIGNOUT MULTSIGNOUT)
                                     ('P P)
                                     ('CARRYCASCOUT CARRYCASCOUT)
                                     ('UNDERFLOW UNDERFLOW)
                                     ('PATTERNBDETECT PATTERNBDETECT)
                                     ('PCOUT PCOUT))
                         init
                         next
                         state-symbols
                         state-types
                         input-types)

       (parse-btor-new
        #<<here-string-delimiter
1 sort bitvec 30
2 input 1 A
3 sort bitvec 32
4 input 3 ACASCREG
5 input 1 ACIN
6 input 3 ADREG
7 sort bitvec 4
8 input 7 ALUMODE
9 input 3 ALUMODEREG
10 sort bitvec 5
11 input 10 AMULTSEL
12 input 3 AREG
13 input 10 AUTORESET_PATDET
14 input 10 AUTORESET_PRIORITY
15 input 10 A_INPUT
16 sort bitvec 18
17 input 16 B
18 input 3 BCASCREG
19 input 16 BCIN
20 input 10 BMULTSEL
21 input 3 BREG
22 input 10 B_INPUT
23 sort bitvec 48
24 input 23 C
25 sort bitvec 1
26 input 25 CARRYCASCIN
27 input 25 CARRYIN
28 input 3 CARRYINREG
29 sort bitvec 3
30 input 29 CARRYINSEL
31 input 3 CARRYINSELREG
32 input 25 CEA1
33 input 25 CEA2
34 input 25 CEAD
35 input 25 CEALUMODE
36 input 25 CEB1
37 input 25 CEB2
38 input 25 CEC
39 input 25 CECARRYIN
40 input 25 CECTRL
41 input 25 CED
42 input 25 CEINMODE
43 input 25 CEM
44 input 25 CEP
45 input 25 CLK
46 input 3 CREG
47 sort bitvec 27
48 input 47 D
49 input 3 DREG
50 input 10 INMODE
51 input 3 INMODEREG
52 input 7 IS_ALUMODE_INVERTED
53 input 25 IS_CARRYIN_INVERTED
54 input 25 IS_CLK_INVERTED
55 input 10 IS_INMODE_INVERTED
56 sort bitvec 9
57 input 56 IS_OPMODE_INVERTED
58 input 25 IS_RSTALLCARRYIN_INVERTED
59 input 25 IS_RSTALUMODE_INVERTED
60 input 25 IS_RSTA_INVERTED
61 input 25 IS_RSTB_INVERTED
62 input 25 IS_RSTCTRL_INVERTED
63 input 25 IS_RSTC_INVERTED
64 input 25 IS_RSTD_INVERTED
65 input 25 IS_RSTINMODE_INVERTED
66 input 25 IS_RSTM_INVERTED
67 input 25 IS_RSTP_INVERTED
68 input 23 MASK
69 input 3 MREG
70 input 25 MULTSIGNIN
71 input 56 OPMODE
72 input 3 OPMODEREG
73 input 23 PATTERN
74 input 23 PCIN
75 sort bitvec 8
76 input 75 PREADDINSEL
77 input 3 PREG
78 input 23 RND
79 input 25 RSTA
80 input 25 RSTALLCARRYIN
81 input 25 RSTALUMODE
82 input 25 RSTB
83 input 25 RSTC
84 input 25 RSTCTRL
85 input 25 RSTD
86 input 25 RSTINMODE
87 input 25 RSTM
88 input 25 RSTP
89 input 10 SEL_MASK
90 input 10 SEL_PATTERN
91 input 10 USE_MULT
92 input 10 USE_PATTERN_DETECT
93 input 10 USE_SIMD
94 input 10 USE_WIDEXOR
95 input 10 XORSIMD
96 state 1
97 state 1
98 const 25 1
99 state 25
100 init 25 99 98
101 neq 25 45 98
102 xor 25 45 54
103 and 25 101 102
104 sort bitvec 2
105 concat 104 103 99
106 const 104 10
107 eq 25 105 106
108 ite 1 107 97 96
109 slice 25 2 0 0
110 eq 25 109 98
111 or 25 110 109
112 slice 25 2 1 1
113 eq 25 112 98
114 or 25 113 112
115 slice 25 2 2 2
116 eq 25 115 98
117 or 25 116 115
118 slice 25 2 3 3
119 eq 25 118 98
120 or 25 119 118
121 slice 25 2 4 4
122 eq 25 121 98
123 or 25 122 121
124 slice 25 2 5 5
125 eq 25 124 98
126 or 25 125 124
127 slice 25 2 6 6
128 eq 25 127 98
129 or 25 128 127
130 slice 25 2 7 7
131 eq 25 130 98
132 or 25 131 130
133 slice 25 2 8 8
134 eq 25 133 98
135 or 25 134 133
136 slice 25 2 9 9
137 eq 25 136 98
138 or 25 137 136
139 slice 25 2 10 10
140 eq 25 139 98
141 or 25 140 139
142 slice 25 2 11 11
143 eq 25 142 98
144 or 25 143 142
145 slice 25 2 12 12
146 eq 25 145 98
147 or 25 146 145
148 slice 25 2 13 13
149 eq 25 148 98
150 or 25 149 148
151 slice 25 2 14 14
152 eq 25 151 98
153 or 25 152 151
154 slice 25 2 15 15
155 eq 25 154 98
156 or 25 155 154
157 slice 25 2 16 16
158 eq 25 157 98
159 or 25 158 157
160 slice 25 2 17 17
161 eq 25 160 98
162 or 25 161 160
163 slice 25 2 18 18
164 eq 25 163 98
165 or 25 164 163
166 slice 25 2 19 19
167 eq 25 166 98
168 or 25 167 166
169 slice 25 2 20 20
170 eq 25 169 98
171 or 25 170 169
172 slice 25 2 21 21
173 eq 25 172 98
174 or 25 173 172
175 slice 25 2 22 22
176 eq 25 175 98
177 or 25 176 175
178 slice 25 2 23 23
179 eq 25 178 98
180 or 25 179 178
181 slice 25 2 24 24
182 eq 25 181 98
183 or 25 182 181
184 slice 25 2 25 25
185 eq 25 184 98
186 or 25 185 184
187 slice 25 2 26 26
188 eq 25 187 98
189 or 25 188 187
190 slice 25 2 27 27
191 eq 25 190 98
192 or 25 191 190
193 slice 25 2 28 28
194 eq 25 193 98
195 or 25 194 193
196 slice 25 2 29 29
197 eq 25 196 98
198 or 25 197 196
199 concat 104 114 111
200 concat 29 117 199
201 concat 7 120 200
202 concat 10 123 201
203 sort bitvec 6
204 concat 203 126 202
205 sort bitvec 7
206 concat 205 129 204
207 concat 75 132 206
208 concat 56 135 207
209 sort bitvec 10
210 concat 209 138 208
211 sort bitvec 11
212 concat 211 141 210
213 sort bitvec 12
214 concat 213 144 212
215 sort bitvec 13
216 concat 215 147 214
217 sort bitvec 14
218 concat 217 150 216
219 sort bitvec 15
220 concat 219 153 218
221 sort bitvec 16
222 concat 221 156 220
223 sort bitvec 17
224 concat 223 159 222
225 concat 16 162 224
226 sort bitvec 19
227 concat 226 165 225
228 sort bitvec 20
229 concat 228 168 227
230 sort bitvec 21
231 concat 230 171 229
232 sort bitvec 22
233 concat 232 174 231
234 sort bitvec 23
235 concat 234 177 233
236 sort bitvec 24
237 concat 236 180 235
238 sort bitvec 25
239 concat 238 183 237
240 sort bitvec 26
241 concat 240 186 239
242 concat 47 189 241
243 sort bitvec 28
244 concat 243 192 242
245 sort bitvec 29
246 concat 245 195 244
247 concat 1 198 246
248 const 25 0
249 const 7 1111
250 uext 10 249 1
251 eq 25 15 250
252 ite 25 251 98 248
253 const 29 111
254 uext 10 253 2
255 eq 25 15 254
256 ite 25 255 248 252
257 ite 1 256 5 247
258 state 1
259 state 1
260 state 25
261 init 25 260 98
262 concat 104 103 260
263 eq 25 262 106
264 ite 1 263 259 258
265 slice 104 12 1 0
266 redor 25 265
267 ite 1 266 264 257
268 slice 104 4 1 0
269 eq 25 268 265
270 ite 1 269 267 108
271 output 270 ACOUT
272 state 16
273 state 16
274 state 25
275 init 25 274 98
276 concat 104 103 274
277 eq 25 276 106
278 ite 16 277 273 272
279 slice 25 17 0 0
280 eq 25 279 98
281 or 25 280 279
282 slice 25 17 1 1
283 eq 25 282 98
284 or 25 283 282
285 slice 25 17 2 2
286 eq 25 285 98
287 or 25 286 285
288 slice 25 17 3 3
289 eq 25 288 98
290 or 25 289 288
291 slice 25 17 4 4
292 eq 25 291 98
293 or 25 292 291
294 slice 25 17 5 5
295 eq 25 294 98
296 or 25 295 294
297 slice 25 17 6 6
298 eq 25 297 98
299 or 25 298 297
300 slice 25 17 7 7
301 eq 25 300 98
302 or 25 301 300
303 slice 25 17 8 8
304 eq 25 303 98
305 or 25 304 303
306 slice 25 17 9 9
307 eq 25 306 98
308 or 25 307 306
309 slice 25 17 10 10
310 eq 25 309 98
311 or 25 310 309
312 slice 25 17 11 11
313 eq 25 312 98
314 or 25 313 312
315 slice 25 17 12 12
316 eq 25 315 98
317 or 25 316 315
318 slice 25 17 13 13
319 eq 25 318 98
320 or 25 319 318
321 slice 25 17 14 14
322 eq 25 321 98
323 or 25 322 321
324 slice 25 17 15 15
325 eq 25 324 98
326 or 25 325 324
327 slice 25 17 16 16
328 eq 25 327 98
329 or 25 328 327
330 slice 25 17 17 17
331 eq 25 330 98
332 or 25 331 330
333 concat 104 284 281
334 concat 29 287 333
335 concat 7 290 334
336 concat 10 293 335
337 concat 203 296 336
338 concat 205 299 337
339 concat 75 302 338
340 concat 56 305 339
341 concat 209 308 340
342 concat 211 311 341
343 concat 213 314 342
344 concat 215 317 343
345 concat 217 320 344
346 concat 219 323 345
347 concat 221 326 346
348 concat 223 329 347
349 concat 16 332 348
350 uext 10 249 1
351 eq 25 22 350
352 ite 25 351 98 248
353 uext 10 253 2
354 eq 25 22 353
355 ite 25 354 248 352
356 ite 16 355 19 349
357 state 16
358 state 16
359 state 25
360 init 25 359 98
361 concat 104 103 359
362 eq 25 361 106
363 ite 16 362 358 357
364 slice 104 21 1 0
365 redor 25 364
366 ite 16 365 363 356
367 slice 104 18 1 0
368 eq 25 367 364
369 ite 16 368 366 278
370 output 369 BCOUT
371 slice 25 8 0 0
372 neq 25 371 98
373 slice 25 52 0 0
374 xor 25 371 373
375 and 25 372 374
376 slice 25 8 1 1
377 neq 25 376 98
378 slice 25 52 1 1
379 xor 25 376 378
380 and 25 377 379
381 slice 25 8 2 2
382 neq 25 381 98
383 slice 25 52 2 2
384 xor 25 381 383
385 and 25 382 384
386 slice 25 8 3 3
387 neq 25 386 98
388 slice 25 52 3 3
389 xor 25 386 388
390 and 25 387 389
391 concat 104 380 375
392 concat 29 385 391
393 concat 7 390 392
394 state 7
395 state 7
396 state 25
397 init 25 396 98
398 concat 104 103 396
399 eq 25 398 106
400 ite 7 399 395 394
401 slice 25 9 0 0
402 ite 7 401 400 393
403 slice 25 402 0 0
404 slice 25 402 1 1
405 and 25 403 404
406 const 104 00
407 const 10 11001
408 eq 25 93 407
409 ite 104 408 106 406
410 const 104 01
411 const 10 10011
412 eq 25 93 411
413 ite 104 412 410 409
414 const 7 1100
415 uext 10 414 1
416 eq 25 93 415
417 ite 104 416 406 413
418 uext 104 98 1
419 neq 25 417 418
420 slice 25 402 0 0
421 slice 25 402 0 0
422 concat 104 421 420
423 slice 25 402 0 0
424 concat 29 423 422
425 slice 25 402 0 0
426 concat 7 425 424
427 slice 25 402 0 0
428 concat 10 427 426
429 slice 25 402 0 0
430 concat 203 429 428
431 slice 25 402 0 0
432 concat 205 431 430
433 slice 25 402 0 0
434 concat 75 433 432
435 slice 25 402 0 0
436 concat 56 435 434
437 slice 25 402 0 0
438 concat 209 437 436
439 slice 25 402 0 0
440 concat 211 439 438
441 slice 25 402 0 0
442 concat 213 441 440
443 slice 25 402 0 0
444 concat 215 443 442
445 slice 25 402 0 0
446 concat 217 445 444
447 slice 25 402 0 0
448 concat 219 447 446
449 slice 25 402 0 0
450 concat 221 449 448
451 slice 25 402 0 0
452 concat 223 451 450
453 slice 25 402 0 0
454 concat 16 453 452
455 slice 25 402 0 0
456 concat 226 455 454
457 slice 25 402 0 0
458 concat 228 457 456
459 slice 25 402 0 0
460 concat 230 459 458
461 slice 25 402 0 0
462 concat 232 461 460
463 slice 25 402 0 0
464 concat 234 463 462
465 slice 25 402 0 0
466 concat 236 465 464
467 slice 25 402 0 0
468 concat 238 467 466
469 slice 25 402 0 0
470 concat 240 469 468
471 slice 25 402 0 0
472 concat 47 471 470
473 slice 25 402 0 0
474 concat 243 473 472
475 slice 25 402 0 0
476 concat 245 475 474
477 slice 25 402 0 0
478 concat 1 477 476
479 slice 25 402 0 0
480 sort bitvec 31
481 concat 480 479 478
482 slice 25 402 0 0
483 concat 3 482 481
484 slice 25 402 0 0
485 sort bitvec 33
486 concat 485 484 483
487 slice 25 402 0 0
488 sort bitvec 34
489 concat 488 487 486
490 slice 25 402 0 0
491 sort bitvec 35
492 concat 491 490 489
493 slice 25 402 0 0
494 sort bitvec 36
495 concat 494 493 492
496 slice 25 402 0 0
497 sort bitvec 37
498 concat 497 496 495
499 slice 25 402 0 0
500 sort bitvec 38
501 concat 500 499 498
502 slice 25 402 0 0
503 sort bitvec 39
504 concat 503 502 501
505 slice 25 402 0 0
506 sort bitvec 40
507 concat 506 505 504
508 slice 25 402 0 0
509 sort bitvec 41
510 concat 509 508 507
511 slice 25 402 0 0
512 sort bitvec 42
513 concat 512 511 510
514 slice 25 402 0 0
515 sort bitvec 43
516 concat 515 514 513
517 slice 25 402 0 0
518 sort bitvec 44
519 concat 518 517 516
520 slice 25 402 0 0
521 sort bitvec 45
522 concat 521 520 519
523 slice 25 402 0 0
524 sort bitvec 46
525 concat 524 523 522
526 slice 25 402 0 0
527 sort bitvec 47
528 concat 527 526 525
529 slice 25 402 0 0
530 concat 23 529 528
531 input 23
532 state 23
533 state 23
534 state 25
535 init 25 534 98
536 concat 104 103 534
537 eq 25 536 106
538 ite 23 537 533 532
539 slice 480 538 47 17
540 slice 25 538 47 47
541 concat 3 540 539
542 slice 25 538 47 47
543 concat 485 542 541
544 slice 25 538 47 47
545 concat 488 544 543
546 slice 25 538 47 47
547 concat 491 546 545
548 slice 25 538 47 47
549 concat 494 548 547
550 slice 25 538 47 47
551 concat 497 550 549
552 slice 25 538 47 47
553 concat 500 552 551
554 slice 25 538 47 47
555 concat 503 554 553
556 slice 25 538 47 47
557 concat 506 556 555
558 slice 25 538 47 47
559 concat 509 558 557
560 slice 25 538 47 47
561 concat 512 560 559
562 slice 25 538 47 47
563 concat 515 562 561
564 slice 25 538 47 47
565 concat 518 564 563
566 slice 25 538 47 47
567 concat 521 566 565
568 slice 25 538 47 47
569 concat 524 568 567
570 slice 25 538 47 47
571 concat 527 570 569
572 slice 25 538 47 47
573 concat 23 572 571
574 slice 25 71 0 0
575 neq 25 574 98
576 slice 25 57 0 0
577 xor 25 574 576
578 and 25 575 577
579 slice 25 71 1 1
580 neq 25 579 98
581 slice 25 57 1 1
582 xor 25 579 581
583 and 25 580 582
584 slice 25 71 2 2
585 neq 25 584 98
586 slice 25 57 2 2
587 xor 25 584 586
588 and 25 585 587
589 slice 25 71 3 3
590 neq 25 589 98
591 slice 25 57 3 3
592 xor 25 589 591
593 and 25 590 592
594 slice 25 71 4 4
595 neq 25 594 98
596 slice 25 57 4 4
597 xor 25 594 596
598 and 25 595 597
599 slice 25 71 5 5
600 neq 25 599 98
601 slice 25 57 5 5
602 xor 25 599 601
603 and 25 600 602
604 slice 25 71 6 6
605 neq 25 604 98
606 slice 25 57 6 6
607 xor 25 604 606
608 and 25 605 607
609 slice 25 71 7 7
610 neq 25 609 98
611 slice 25 57 7 7
612 xor 25 609 611
613 and 25 610 612
614 slice 25 71 8 8
615 neq 25 614 98
616 slice 25 57 8 8
617 xor 25 614 616
618 and 25 615 617
619 concat 104 583 578
620 concat 29 588 619
621 concat 7 593 620
622 concat 10 598 621
623 concat 203 603 622
624 concat 205 608 623
625 concat 75 613 624
626 concat 56 618 625
627 state 56
628 state 56
629 state 25
630 init 25 629 98
631 concat 104 103 629
632 eq 25 631 106
633 ite 56 632 628 627
634 slice 25 72 0 0
635 ite 56 634 633 626
636 slice 104 635 6 5
637 const 104 11
638 eq 25 636 637
639 ite 23 638 573 531
640 slice 480 74 47 17
641 slice 25 74 47 47
642 concat 3 641 640
643 slice 25 74 47 47
644 concat 485 643 642
645 slice 25 74 47 47
646 concat 488 645 644
647 slice 25 74 47 47
648 concat 491 647 646
649 slice 25 74 47 47
650 concat 494 649 648
651 slice 25 74 47 47
652 concat 497 651 650
653 slice 25 74 47 47
654 concat 500 653 652
655 slice 25 74 47 47
656 concat 503 655 654
657 slice 25 74 47 47
658 concat 506 657 656
659 slice 25 74 47 47
660 concat 509 659 658
661 slice 25 74 47 47
662 concat 512 661 660
663 slice 25 74 47 47
664 concat 515 663 662
665 slice 25 74 47 47
666 concat 518 665 664
667 slice 25 74 47 47
668 concat 521 667 666
669 slice 25 74 47 47
670 concat 524 669 668
671 slice 25 74 47 47
672 concat 527 671 670
673 slice 25 74 47 47
674 concat 23 673 672
675 slice 29 635 6 4
676 const 29 101
677 eq 25 675 676
678 ite 23 677 674 639
679 const 29 100
680 eq 25 675 679
681 uext 29 106 1
682 eq 25 675 681
683 concat 104 682 680
684 redor 25 683
685 ite 23 684 538 678
686 slice 25 24 0 0
687 eq 25 686 98
688 or 25 687 686
689 slice 25 24 1 1
690 eq 25 689 98
691 or 25 690 689
692 slice 25 24 2 2
693 eq 25 692 98
694 or 25 693 692
695 slice 25 24 3 3
696 eq 25 695 98
697 or 25 696 695
698 slice 25 24 4 4
699 eq 25 698 98
700 or 25 699 698
701 slice 25 24 5 5
702 eq 25 701 98
703 or 25 702 701
704 slice 25 24 6 6
705 eq 25 704 98
706 or 25 705 704
707 slice 25 24 7 7
708 eq 25 707 98
709 or 25 708 707
710 slice 25 24 8 8
711 eq 25 710 98
712 or 25 711 710
713 slice 25 24 9 9
714 eq 25 713 98
715 or 25 714 713
716 slice 25 24 10 10
717 eq 25 716 98
718 or 25 717 716
719 slice 25 24 11 11
720 eq 25 719 98
721 or 25 720 719
722 slice 25 24 12 12
723 eq 25 722 98
724 or 25 723 722
725 slice 25 24 13 13
726 eq 25 725 98
727 or 25 726 725
728 slice 25 24 14 14
729 eq 25 728 98
730 or 25 729 728
731 slice 25 24 15 15
732 eq 25 731 98
733 or 25 732 731
734 slice 25 24 16 16
735 eq 25 734 98
736 or 25 735 734
737 slice 25 24 17 17
738 eq 25 737 98
739 or 25 738 737
740 slice 25 24 18 18
741 eq 25 740 98
742 or 25 741 740
743 slice 25 24 19 19
744 eq 25 743 98
745 or 25 744 743
746 slice 25 24 20 20
747 eq 25 746 98
748 or 25 747 746
749 slice 25 24 21 21
750 eq 25 749 98
751 or 25 750 749
752 slice 25 24 22 22
753 eq 25 752 98
754 or 25 753 752
755 slice 25 24 23 23
756 eq 25 755 98
757 or 25 756 755
758 slice 25 24 24 24
759 eq 25 758 98
760 or 25 759 758
761 slice 25 24 25 25
762 eq 25 761 98
763 or 25 762 761
764 slice 25 24 26 26
765 eq 25 764 98
766 or 25 765 764
767 slice 25 24 27 27
768 eq 25 767 98
769 or 25 768 767
770 slice 25 24 28 28
771 eq 25 770 98
772 or 25 771 770
773 slice 25 24 29 29
774 eq 25 773 98
775 or 25 774 773
776 slice 25 24 30 30
777 eq 25 776 98
778 or 25 777 776
779 slice 25 24 31 31
780 eq 25 779 98
781 or 25 780 779
782 slice 25 24 32 32
783 eq 25 782 98
784 or 25 783 782
785 slice 25 24 33 33
786 eq 25 785 98
787 or 25 786 785
788 slice 25 24 34 34
789 eq 25 788 98
790 or 25 789 788
791 slice 25 24 35 35
792 eq 25 791 98
793 or 25 792 791
794 slice 25 24 36 36
795 eq 25 794 98
796 or 25 795 794
797 slice 25 24 37 37
798 eq 25 797 98
799 or 25 798 797
800 slice 25 24 38 38
801 eq 25 800 98
802 or 25 801 800
803 slice 25 24 39 39
804 eq 25 803 98
805 or 25 804 803
806 slice 25 24 40 40
807 eq 25 806 98
808 or 25 807 806
809 slice 25 24 41 41
810 eq 25 809 98
811 or 25 810 809
812 slice 25 24 42 42
813 eq 25 812 98
814 or 25 813 812
815 slice 25 24 43 43
816 eq 25 815 98
817 or 25 816 815
818 slice 25 24 44 44
819 eq 25 818 98
820 or 25 819 818
821 slice 25 24 45 45
822 eq 25 821 98
823 or 25 822 821
824 slice 25 24 46 46
825 eq 25 824 98
826 or 25 825 824
827 slice 25 24 47 47
828 eq 25 827 98
829 or 25 828 827
830 concat 104 691 688
831 concat 29 694 830
832 concat 7 697 831
833 concat 10 700 832
834 concat 203 703 833
835 concat 205 706 834
836 concat 75 709 835
837 concat 56 712 836
838 concat 209 715 837
839 concat 211 718 838
840 concat 213 721 839
841 concat 215 724 840
842 concat 217 727 841
843 concat 219 730 842
844 concat 221 733 843
845 concat 223 736 844
846 concat 16 739 845
847 concat 226 742 846
848 concat 228 745 847
849 concat 230 748 848
850 concat 232 751 849
851 concat 234 754 850
852 concat 236 757 851
853 concat 238 760 852
854 concat 240 763 853
855 concat 47 766 854
856 concat 243 769 855
857 concat 245 772 856
858 concat 1 775 857
859 concat 480 778 858
860 concat 3 781 859
861 concat 485 784 860
862 concat 488 787 861
863 concat 491 790 862
864 concat 494 793 863
865 concat 497 796 864
866 concat 500 799 865
867 concat 503 802 866
868 concat 506 805 867
869 concat 509 808 868
870 concat 512 811 869
871 concat 515 814 870
872 concat 518 817 871
873 concat 521 820 872
874 concat 524 823 873
875 concat 527 826 874
876 concat 23 829 875
877 state 23
878 state 23
879 state 25
880 init 25 879 98
881 concat 104 103 879
882 eq 25 881 106
883 ite 23 882 878 877
884 slice 25 46 0 0
885 ite 23 884 883 876
886 uext 29 637 1
887 eq 25 675 886
888 ite 23 887 885 685
889 uext 29 98 2
890 eq 25 675 889
891 ite 23 890 74 888
892 const 23 000000000000000000000000000000000000000000000000
893 redor 25 675
894 not 25 893
895 ite 23 894 892 891
896 xor 23 530 895
897 input 23
898 concat 23 267 366
899 slice 104 635 1 0
900 eq 25 899 637
901 ite 23 900 898 897
902 eq 25 899 106
903 ite 23 902 538 901
904 const 521 100000000000000000000000000000000000000000000
905 slice 47 267 26 0
906 slice 47 108 26 0
907 slice 25 50 0 0
908 neq 25 907 98
909 slice 25 55 0 0
910 xor 25 907 909
911 and 25 908 910
912 slice 25 50 1 1
913 neq 25 912 98
914 slice 25 55 1 1
915 xor 25 912 914
916 and 25 913 915
917 slice 25 50 2 2
918 neq 25 917 98
919 slice 25 55 2 2
920 xor 25 917 919
921 and 25 918 920
922 slice 25 50 3 3
923 neq 25 922 98
924 slice 25 55 3 3
925 xor 25 922 924
926 and 25 923 925
927 slice 25 50 4 4
928 neq 25 927 98
929 slice 25 55 4 4
930 xor 25 927 929
931 and 25 928 930
932 concat 104 916 911
933 concat 29 921 932
934 concat 7 926 933
935 concat 10 931 934
936 state 10
937 state 10
938 state 25
939 init 25 938 98
940 concat 104 103 938
941 eq 25 940 106
942 ite 10 941 937 936
943 slice 25 51 0 0
944 ite 10 943 942 935
945 slice 25 944 0 0
946 ite 47 945 906 905
947 const 47 000000000000000000000000000
948 uext 75 98 7
949 eq 25 76 948
950 ite 25 949 98 248
951 redor 25 76
952 not 25 951
953 ite 25 952 248 950
954 not 25 953
955 slice 25 944 1 1
956 and 25 954 955
957 ite 47 956 947 946
958 slice 25 48 0 0
959 neq 25 958 98
960 and 25 959 958
961 slice 25 48 1 1
962 neq 25 961 98
963 and 25 962 961
964 slice 25 48 2 2
965 neq 25 964 98
966 and 25 965 964
967 slice 25 48 3 3
968 neq 25 967 98
969 and 25 968 967
970 slice 25 48 4 4
971 neq 25 970 98
972 and 25 971 970
973 slice 25 48 5 5
974 neq 25 973 98
975 and 25 974 973
976 slice 25 48 6 6
977 neq 25 976 98
978 and 25 977 976
979 slice 25 48 7 7
980 neq 25 979 98
981 and 25 980 979
982 slice 25 48 8 8
983 neq 25 982 98
984 and 25 983 982
985 slice 25 48 9 9
986 neq 25 985 98
987 and 25 986 985
988 slice 25 48 10 10
989 neq 25 988 98
990 and 25 989 988
991 slice 25 48 11 11
992 neq 25 991 98
993 and 25 992 991
994 slice 25 48 12 12
995 neq 25 994 98
996 and 25 995 994
997 slice 25 48 13 13
998 neq 25 997 98
999 and 25 998 997
1000 slice 25 48 14 14
1001 neq 25 1000 98
1002 and 25 1001 1000
1003 slice 25 48 15 15
1004 neq 25 1003 98
1005 and 25 1004 1003
1006 slice 25 48 16 16
1007 neq 25 1006 98
1008 and 25 1007 1006
1009 slice 25 48 17 17
1010 neq 25 1009 98
1011 and 25 1010 1009
1012 slice 25 48 18 18
1013 neq 25 1012 98
1014 and 25 1013 1012
1015 slice 25 48 19 19
1016 neq 25 1015 98
1017 and 25 1016 1015
1018 slice 25 48 20 20
1019 neq 25 1018 98
1020 and 25 1019 1018
1021 slice 25 48 21 21
1022 neq 25 1021 98
1023 and 25 1022 1021
1024 slice 25 48 22 22
1025 neq 25 1024 98
1026 and 25 1025 1024
1027 slice 25 48 23 23
1028 neq 25 1027 98
1029 and 25 1028 1027
1030 slice 25 48 24 24
1031 neq 25 1030 98
1032 and 25 1031 1030
1033 slice 25 48 25 25
1034 neq 25 1033 98
1035 and 25 1034 1033
1036 slice 25 48 26 26
1037 neq 25 1036 98
1038 and 25 1037 1036
1039 concat 104 963 960
1040 concat 29 966 1039
1041 concat 7 969 1040
1042 concat 10 972 1041
1043 concat 203 975 1042
1044 concat 205 978 1043
1045 concat 75 981 1044
1046 concat 56 984 1045
1047 concat 209 987 1046
1048 concat 211 990 1047
1049 concat 213 993 1048
1050 concat 215 996 1049
1051 concat 217 999 1050
1052 concat 219 1002 1051
1053 concat 221 1005 1052
1054 concat 223 1008 1053
1055 concat 16 1011 1054
1056 concat 226 1014 1055
1057 concat 228 1017 1056
1058 concat 230 1020 1057
1059 concat 232 1023 1058
1060 concat 234 1026 1059
1061 concat 236 1029 1060
1062 concat 238 1032 1061
1063 concat 240 1035 1062
1064 concat 47 1038 1063
1065 state 47
1066 state 47
1067 state 25
1068 init 25 1067 98
1069 concat 104 103 1067
1070 eq 25 1069 106
1071 ite 47 1070 1066 1065
1072 slice 25 49 0 0
1073 uext 10 106 3
1074 eq 25 11 1073
1075 ite 25 1074 98 248
1076 const 211 00000000000
1077 concat 221 1076 11
1078 redor 25 1077
1079 not 25 1078
1080 ite 25 1079 248 1075
1081 not 25 1080
1082 uext 10 106 3
1083 eq 25 20 1082
1084 ite 25 1083 98 248
1085 uext 10 98 4
1086 eq 25 20 1085
1087 ite 25 1086 248 1084
1088 not 25 1087
1089 and 25 1081 1088
1090 const 10 10100
1091 eq 25 91 1090
1092 ite 104 1091 106 406
1093 const 10 10010
1094 eq 25 91 1093
1095 ite 104 1094 410 1092
1096 const 7 1010
1097 uext 10 1096 1
1098 eq 25 91 1097
1099 ite 104 1098 406 1095
1100 eq 25 1099 106
1101 or 25 1089 1100
1102 ite 25 1101 248 1072
1103 ite 47 1102 1071 1064
1104 slice 25 944 2 2
1105 ite 47 1104 1103 947
1106 slice 25 944 4 4
1107 ite 16 1106 278 366
1108 const 16 000000000000000000
1109 and 25 953 955
1110 ite 16 1109 1108 1107
1111 slice 25 1110 17 17
1112 concat 226 1111 1110
1113 slice 25 1110 17 17
1114 concat 228 1113 1112
1115 slice 25 1110 17 17
1116 concat 230 1115 1114
1117 slice 25 1110 17 17
1118 concat 232 1117 1116
1119 slice 25 1110 17 17
1120 concat 234 1119 1118
1121 slice 25 1110 17 17
1122 concat 236 1121 1120
1123 slice 25 1110 17 17
1124 concat 238 1123 1122
1125 slice 25 1110 17 17
1126 concat 240 1125 1124
1127 slice 25 1110 17 17
1128 concat 47 1127 1126
1129 ite 47 953 1128 957
1130 add 47 1105 1129
1131 sub 47 1105 1129
1132 slice 25 944 3 3
1133 ite 47 1132 1131 1130
1134 state 47
1135 state 47
1136 state 25
1137 init 25 1136 98
1138 concat 104 103 1136
1139 eq 25 1138 106
1140 ite 47 1139 1135 1134
1141 slice 25 6 0 0
1142 ite 25 1101 248 1141
1143 ite 47 1142 1140 1133
1144 ite 47 1080 1143 957
1145 slice 25 1144 26 26
1146 concat 243 1145 1144
1147 slice 25 1144 26 26
1148 concat 245 1147 1146
1149 slice 25 1144 26 26
1150 concat 1 1149 1148
1151 slice 25 1144 26 26
1152 concat 480 1151 1150
1153 slice 25 1144 26 26
1154 concat 3 1153 1152
1155 slice 25 1144 26 26
1156 concat 485 1155 1154
1157 slice 25 1144 26 26
1158 concat 488 1157 1156
1159 slice 25 1144 26 26
1160 concat 491 1159 1158
1161 slice 25 1144 26 26
1162 concat 494 1161 1160
1163 slice 25 1144 26 26
1164 concat 497 1163 1162
1165 slice 25 1144 26 26
1166 concat 500 1165 1164
1167 slice 25 1144 26 26
1168 concat 503 1167 1166
1169 slice 25 1144 26 26
1170 concat 506 1169 1168
1171 slice 25 1144 26 26
1172 concat 509 1171 1170
1173 slice 25 1144 26 26
1174 concat 512 1173 1172
1175 slice 25 1144 26 26
1176 concat 515 1175 1174
1177 slice 25 1144 26 26
1178 concat 518 1177 1176
1179 slice 25 1144 26 26
1180 concat 521 1179 1178
1181 slice 16 1143 17 0
1182 ite 16 1087 1181 1110
1183 slice 25 1182 17 17
1184 concat 226 1183 1182
1185 slice 25 1182 17 17
1186 concat 228 1185 1184
1187 slice 25 1182 17 17
1188 concat 230 1187 1186
1189 slice 25 1182 17 17
1190 concat 232 1189 1188
1191 slice 25 1182 17 17
1192 concat 234 1191 1190
1193 slice 25 1182 17 17
1194 concat 236 1193 1192
1195 slice 25 1182 17 17
1196 concat 238 1195 1194
1197 slice 25 1182 17 17
1198 concat 240 1197 1196
1199 slice 25 1182 17 17
1200 concat 47 1199 1198
1201 slice 25 1182 17 17
1202 concat 243 1201 1200
1203 slice 25 1182 17 17
1204 concat 245 1203 1202
1205 slice 25 1182 17 17
1206 concat 1 1205 1204
1207 slice 25 1182 17 17
1208 concat 480 1207 1206
1209 slice 25 1182 17 17
1210 concat 3 1209 1208
1211 slice 25 1182 17 17
1212 concat 485 1211 1210
1213 slice 25 1182 17 17
1214 concat 488 1213 1212
1215 slice 25 1182 17 17
1216 concat 491 1215 1214
1217 slice 25 1182 17 17
1218 concat 494 1217 1216
1219 slice 25 1182 17 17
1220 concat 497 1219 1218
1221 slice 25 1182 17 17
1222 concat 500 1221 1220
1223 slice 25 1182 17 17
1224 concat 503 1223 1222
1225 slice 25 1182 17 17
1226 concat 506 1225 1224
1227 slice 25 1182 17 17
1228 concat 509 1227 1226
1229 slice 25 1182 17 17
1230 concat 512 1229 1228
1231 slice 25 1182 17 17
1232 concat 515 1231 1230
1233 slice 25 1182 17 17
1234 concat 518 1233 1232
1235 slice 25 1182 17 17
1236 concat 521 1235 1234
1237 mul 521 1180 1236
1238 const 521 000000000000000000000000000000000000000000000
1239 ite 521 1100 1238 1237
1240 slice 518 1239 43 0
1241 const 515 1010101010101010101010101010101010101010101
1242 uext 518 1241 1
1243 and 518 1240 1242
1244 concat 521 98 1243
1245 state 521
1246 state 521
1247 state 25
1248 init 25 1247 98
1249 concat 104 103 1247
1250 eq 25 1249 106
1251 ite 521 1250 1246 1245
1252 slice 25 69 0 0
1253 ite 521 1252 1251 1244
1254 redor 25 417
1255 not 25 1254
1256 ite 521 1255 1253 904
1257 slice 25 1256 44 44
1258 concat 524 1257 1256
1259 slice 25 1256 44 44
1260 concat 527 1259 1258
1261 slice 25 1256 44 44
1262 concat 23 1261 1260
1263 uext 104 98 1
1264 eq 25 899 1263
1265 ite 23 1264 1262 903
1266 concat 104 70 248
1267 ite 104 680 1266 406
1268 const 524 0000000000000000000000000000000000000000000000
1269 concat 23 1268 1267
1270 redor 25 899
1271 not 25 1270
1272 ite 23 1271 1269 1265
1273 xor 23 896 1272
1274 input 23
1275 slice 104 635 3 2
1276 eq 25 1275 637
1277 ite 23 1276 885 1274
1278 const 23 111111111111111111111111111111111111111111111111
1279 eq 25 1275 106
1280 ite 23 1279 1278 1277
1281 const 518 10101010101010101010101010101010101010101010
1282 and 518 1240 1281
1283 slice 25 1239 44 44
1284 not 25 1283
1285 concat 521 1284 1282
1286 state 521
1287 state 521
1288 state 25
1289 init 25 1288 98
1290 concat 104 103 1288
1291 eq 25 1290 106
1292 ite 521 1291 1287 1286
1293 ite 521 1252 1292 1285
1294 ite 521 1255 1293 904
1295 const 29 000
1296 concat 23 1295 1294
1297 uext 104 98 1
1298 eq 25 1275 1297
1299 ite 23 1298 1296 1280
1300 redor 25 1275
1301 not 25 1300
1302 ite 23 1301 892 1299
1303 xor 23 1273 1302
1304 and 23 1272 1302
1305 and 23 896 1302
1306 or 23 1304 1305
1307 and 23 1272 896
1308 or 23 1306 1307
1309 slice 25 402 3 3
1310 ite 23 1309 1308 1303
1311 slice 25 402 2 2
1312 ite 23 1311 892 1308
1313 slice 25 1312 11 11
1314 and 25 1313 419
1315 slice 25 1312 23 23
1316 and 25 1315 1255
1317 slice 25 1312 35 35
1318 and 25 1317 419
1319 slice 211 1312 10 0
1320 concat 213 1319 248
1321 concat 215 1314 1320
1322 slice 211 1312 22 12
1323 concat 236 1322 1321
1324 concat 238 1316 1323
1325 slice 211 1312 34 24
1326 concat 494 1325 1324
1327 concat 497 1318 1326
1328 slice 211 1312 46 36
1329 concat 23 1328 1327
1330 and 23 1310 1329
1331 input 23
1332 slice 104 635 8 7
1333 eq 25 1332 637
1334 ite 23 1333 885 1331
1335 eq 25 1332 106
1336 ite 23 1335 78 1334
1337 uext 104 98 1
1338 eq 25 1332 1337
1339 ite 23 1338 538 1336
1340 redor 25 1332
1341 not 25 1340
1342 ite 23 1341 892 1339
1343 and 23 1342 1329
1344 or 23 1330 1343
1345 and 23 1310 1342
1346 or 23 1344 1345
1347 slice 25 1346 35 35
1348 and 25 419 1347
1349 slice 213 1346 47 36
1350 concat 215 1349 1348
1351 uext 217 1350 1
1352 xor 23 1310 1329
1353 xor 23 1352 1342
1354 slice 213 1353 47 36
1355 slice 25 1312 47 47
1356 concat 215 1355 1354
1357 uext 217 1356 1
1358 add 217 1351 1357
1359 slice 25 1346 23 23
1360 and 25 1255 1359
1361 slice 211 1346 34 24
1362 concat 213 1361 1360
1363 uext 215 1362 1
1364 slice 213 1353 35 24
1365 uext 215 1364 1
1366 add 215 1363 1365
1367 slice 25 1346 11 11
1368 and 25 419 1367
1369 slice 211 1346 22 12
1370 concat 213 1369 1368
1371 uext 215 1370 1
1372 slice 213 1353 23 12
1373 uext 215 1372 1
1374 add 215 1371 1373
1375 input 25
1376 slice 25 538 47 47
1377 not 25 1376
1378 slice 25 30 0 0
1379 neq 25 1378 98
1380 and 25 1379 1378
1381 slice 25 30 1 1
1382 neq 25 1381 98
1383 and 25 1382 1381
1384 slice 25 30 2 2
1385 neq 25 1384 98
1386 and 25 1385 1384
1387 concat 104 1383 1380
1388 concat 29 1386 1387
1389 state 29
1390 state 29
1391 state 25
1392 init 25 1391 98
1393 concat 104 103 1391
1394 eq 25 1393 106
1395 ite 29 1394 1390 1389
1396 slice 25 31 0 0
1397 ite 29 1396 1395 1388
1398 eq 25 1397 253
1399 ite 25 1398 1377 1375
1400 slice 25 1144 26 26
1401 slice 25 1182 17 17
1402 xor 25 1400 1401
1403 not 25 1402
1404 state 25
1405 state 25
1406 state 25
1407 init 25 1406 98
1408 concat 104 103 1406
1409 eq 25 1408 106
1410 ite 25 1409 1405 1404
1411 ite 25 1252 1410 1403
1412 not 25 1411
1413 const 29 110
1414 eq 25 1397 1413
1415 ite 25 1414 1412 1399
1416 eq 25 1397 676
1417 ite 25 1416 1376 1415
1418 state 25
1419 state 25
1420 state 25
1421 init 25 1420 98
1422 concat 104 103 1420
1423 eq 25 1422 106
1424 ite 25 1423 1419 1418
1425 state 7
1426 state 7
1427 state 25
1428 init 25 1427 98
1429 concat 104 103 1427
1430 eq 25 1429 106
1431 ite 7 1430 1426 1425
1432 slice 25 1431 3 3
1433 xor 25 1424 1432
1434 not 25 1433
1435 eq 25 1397 679
1436 ite 25 1435 1434 1417
1437 slice 25 74 47 47
1438 not 25 1437
1439 uext 29 637 1
1440 eq 25 1397 1439
1441 ite 25 1440 1438 1436
1442 not 25 26
1443 uext 29 106 1
1444 eq 25 1397 1443
1445 ite 25 1444 1442 1441
1446 uext 29 98 2
1447 eq 25 1397 1446
1448 ite 25 1447 1437 1445
1449 neq 25 27 98
1450 xor 25 27 53
1451 and 25 1449 1450
1452 state 25
1453 state 25
1454 state 25
1455 init 25 1454 98
1456 concat 104 103 1454
1457 eq 25 1456 106
1458 ite 25 1457 1453 1452
1459 slice 25 28 0 0
1460 ite 25 1459 1458 1451
1461 not 25 1460
1462 redor 25 1397
1463 not 25 1462
1464 ite 25 1463 1461 1448
1465 not 25 1464
1466 or 25 1309 1311
1467 ite 25 1466 248 1465
1468 slice 211 1346 10 0
1469 concat 213 1468 1467
1470 uext 215 1469 1
1471 slice 213 1353 11 0
1472 uext 215 1471 1
1473 add 215 1470 1472
1474 slice 25 1473 12 12
1475 and 25 419 1474
1476 uext 215 1475 12
1477 add 215 1374 1476
1478 slice 25 1477 12 12
1479 and 25 1255 1478
1480 uext 215 1479 12
1481 add 215 1366 1480
1482 slice 25 1481 12 12
1483 and 25 419 1482
1484 uext 217 1483 13
1485 add 217 1358 1484
1486 slice 25 1485 12 12
1487 xor 25 405 1486
1488 xor 25 405 1487
1489 slice 25 77 0 0
1490 ite 25 1489 1433 1488
1491 output 1490 CARRYCASCOUT
1492 xor 25 1367 1474
1493 xor 25 1492 1313
1494 xor 25 405 1493
1495 slice 7 635 3 0
1496 uext 7 676 1
1497 eq 25 1495 1496
1498 slice 104 402 3 2
1499 redor 25 1498
1500 or 25 1497 1499
1501 ite 25 1500 248 1494
1502 uext 104 98 1
1503 eq 25 417 1502
1504 ite 25 1503 1501 248
1505 xor 25 1359 1478
1506 xor 25 1505 1315
1507 xor 25 405 1506
1508 ite 25 1500 248 1507
1509 redor 25 417
1510 ite 25 1509 1508 248
1511 xor 25 1347 1482
1512 xor 25 1511 1317
1513 xor 25 405 1512
1514 ite 25 1500 248 1513
1515 ite 25 1503 1514 248
1516 concat 104 1510 1504
1517 concat 29 1515 1516
1518 concat 7 1487 1517
1519 ite 7 1489 1431 1518
1520 output 1519 CARRYOUT
1521 slice 25 1485 13 13
1522 state 25
1523 state 25
1524 state 25
1525 init 25 1524 98
1526 concat 104 103 1524
1527 eq 25 1526 106
1528 ite 25 1527 1523 1522
1529 ite 25 1489 1528 1521
1530 output 1529 MULTSIGNOUT
1531 const 10 10001
1532 eq 25 90 1531
1533 ite 25 1532 98 248
1534 const 7 1001
1535 uext 10 1534 1
1536 eq 25 90 1535
1537 ite 25 1536 248 1533
1538 ite 23 1537 885 73
1539 slice 25 402 1 1
1540 slice 25 402 1 1
1541 concat 104 1540 1539
1542 slice 25 402 1 1
1543 concat 29 1542 1541
1544 slice 25 402 1 1
1545 concat 7 1544 1543
1546 slice 25 402 1 1
1547 concat 10 1546 1545
1548 slice 25 402 1 1
1549 concat 203 1548 1547
1550 slice 25 402 1 1
1551 concat 205 1550 1549
1552 slice 25 402 1 1
1553 concat 75 1552 1551
1554 slice 25 402 1 1
1555 concat 56 1554 1553
1556 slice 25 402 1 1
1557 concat 209 1556 1555
1558 slice 25 402 1 1
1559 concat 211 1558 1557
1560 slice 25 402 1 1
1561 concat 213 1560 1559
1562 slice 25 402 1 1
1563 concat 215 1562 1561
1564 slice 25 402 1 1
1565 concat 217 1564 1563
1566 slice 25 402 1 1
1567 concat 219 1566 1565
1568 slice 25 402 1 1
1569 concat 221 1568 1567
1570 slice 25 402 1 1
1571 concat 223 1570 1569
1572 slice 25 402 1 1
1573 concat 16 1572 1571
1574 slice 25 402 1 1
1575 concat 226 1574 1573
1576 slice 25 402 1 1
1577 concat 228 1576 1575
1578 slice 25 402 1 1
1579 concat 230 1578 1577
1580 slice 25 402 1 1
1581 concat 232 1580 1579
1582 slice 25 402 1 1
1583 concat 234 1582 1581
1584 slice 25 402 1 1
1585 concat 236 1584 1583
1586 slice 25 402 1 1
1587 concat 238 1586 1585
1588 slice 25 402 1 1
1589 concat 240 1588 1587
1590 slice 25 402 1 1
1591 concat 47 1590 1589
1592 slice 25 402 1 1
1593 concat 243 1592 1591
1594 slice 25 402 1 1
1595 concat 245 1594 1593
1596 slice 25 402 1 1
1597 concat 1 1596 1595
1598 slice 25 402 1 1
1599 concat 480 1598 1597
1600 slice 25 402 1 1
1601 concat 3 1600 1599
1602 slice 25 402 1 1
1603 concat 485 1602 1601
1604 slice 25 402 1 1
1605 concat 488 1604 1603
1606 slice 25 402 1 1
1607 concat 491 1606 1605
1608 slice 25 402 1 1
1609 concat 494 1608 1607
1610 slice 25 402 1 1
1611 concat 497 1610 1609
1612 slice 25 402 1 1
1613 concat 500 1612 1611
1614 slice 25 402 1 1
1615 concat 503 1614 1613
1616 slice 25 402 1 1
1617 concat 506 1616 1615
1618 slice 25 402 1 1
1619 concat 509 1618 1617
1620 slice 25 402 1 1
1621 concat 512 1620 1619
1622 slice 25 402 1 1
1623 concat 515 1622 1621
1624 slice 25 402 1 1
1625 concat 518 1624 1623
1626 slice 25 402 1 1
1627 concat 521 1626 1625
1628 slice 25 402 1 1
1629 concat 524 1628 1627
1630 slice 25 402 1 1
1631 concat 527 1630 1629
1632 slice 25 402 1 1
1633 concat 23 1632 1631
1634 slice 213 1473 11 0
1635 slice 213 1477 11 0
1636 concat 236 1635 1634
1637 slice 213 1481 11 0
1638 concat 494 1637 1636
1639 slice 213 1485 11 0
1640 concat 23 1639 1638
1641 xor 23 1633 1640
1642 xor 23 1538 1641
1643 not 23 1642
1644 slice 524 885 45 0
1645 not 524 1644
1646 concat 23 1645 406
1647 const 10 10111
1648 eq 25 89 1647
1649 ite 104 1648 637 406
1650 const 10 10110
1651 eq 25 89 1650
1652 ite 104 1651 106 1649
1653 eq 25 89 1531
1654 ite 104 1653 410 1652
1655 const 7 1000
1656 uext 10 1655 1
1657 eq 25 89 1656
1658 ite 104 1657 406 1654
1659 eq 25 1658 637
1660 ite 23 1659 1646 68
1661 slice 527 885 46 0
1662 not 527 1661
1663 concat 23 1662 248
1664 eq 25 1658 106
1665 ite 23 1664 1663 1660
1666 uext 104 98 1
1667 eq 25 1658 1666
1668 ite 23 1667 885 1665
1669 const 10 10101
1670 eq 25 92 1669
1671 ite 25 1670 98 248
1672 const 7 1011
1673 uext 10 1672 1
1674 eq 25 92 1673
1675 ite 25 1674 248 1671
1676 ite 23 1675 1668 1278
1677 or 23 1643 1676
1678 redand 25 1677
1679 state 25
1680 state 25
1681 state 25
1682 init 25 1681 98
1683 concat 104 103 1681
1684 eq 25 1683 106
1685 ite 25 1684 1680 1679
1686 ite 25 1489 1685 1678
1687 not 25 1686
1688 or 23 1642 1676
1689 redand 25 1688
1690 state 25
1691 state 25
1692 state 25
1693 init 25 1692 98
1694 concat 104 103 1692
1695 eq 25 1694 106
1696 ite 25 1695 1691 1690
1697 ite 25 1489 1696 1689
1698 not 25 1697
1699 and 25 1687 1698
1700 state 25
1701 state 25
1702 state 25
1703 init 25 1702 98
1704 concat 104 103 1702
1705 eq 25 1704 106
1706 ite 25 1705 1701 1700
1707 ite 25 1489 1706 1678
1708 and 25 1699 1707
1709 ite 25 1675 1708 248
1710 output 1709 OVERFLOW
1711 ite 23 1489 538 1641
1712 output 1711 P
1713 output 1697 PATTERNBDETECT
1714 output 1686 PATTERNDETECT
1715 output 1711 PCOUT
1716 state 25
1717 state 25
1718 state 25
1719 init 25 1718 98
1720 concat 104 103 1718
1721 eq 25 1720 106
1722 ite 25 1721 1717 1716
1723 ite 25 1489 1722 1689
1724 and 25 1699 1723
1725 ite 25 1675 1724 248
1726 output 1725 UNDERFLOW
1727 slice 203 1303 5 0
1728 redxor 25 1727
1729 const 10 11000
1730 eq 25 94 1729
1731 ite 25 1730 98 248
1732 const 7 1101
1733 uext 10 1732 1
1734 eq 25 94 1733
1735 ite 25 1734 248 1731
1736 ite 25 1735 1728 248
1737 slice 203 1303 11 6
1738 redxor 25 1737
1739 ite 25 1735 1738 248
1740 xor 25 1736 1739
1741 const 10 11010
1742 eq 25 95 1741
1743 ite 25 1742 98 248
1744 const 7 1110
1745 uext 10 1744 1
1746 eq 25 95 1745
1747 ite 25 1746 248 1743
1748 ite 25 1747 1736 1740
1749 slice 203 1303 17 12
1750 redxor 25 1749
1751 ite 25 1735 1750 248
1752 slice 203 1303 23 18
1753 redxor 25 1752
1754 ite 25 1735 1753 248
1755 xor 25 1751 1754
1756 xor 25 1740 1755
1757 ite 25 1747 1739 1756
1758 ite 25 1747 1751 1755
1759 slice 203 1303 29 24
1760 redxor 25 1759
1761 ite 25 1735 1760 248
1762 slice 203 1303 35 30
1763 redxor 25 1762
1764 ite 25 1735 1763 248
1765 xor 25 1761 1764
1766 slice 203 1303 41 36
1767 redxor 25 1766
1768 ite 25 1735 1767 248
1769 slice 203 1303 47 42
1770 redxor 25 1769
1771 ite 25 1735 1770 248
1772 xor 25 1768 1771
1773 xor 25 1765 1772
1774 xor 25 1756 1773
1775 ite 25 1747 1754 1774
1776 ite 25 1747 1761 1765
1777 ite 25 1747 1764 1773
1778 ite 25 1747 1768 1772
1779 concat 104 1757 1748
1780 concat 29 1758 1779
1781 concat 7 1775 1780
1782 concat 10 1776 1781
1783 concat 203 1777 1782
1784 concat 205 1778 1783
1785 concat 75 1771 1784
1786 state 75
1787 state 75
1788 state 25
1789 init 25 1788 98
1790 concat 104 103 1788
1791 eq 25 1790 106
1792 ite 75 1791 1787 1786
1793 ite 75 1489 1792 1785
1794 output 1793 XOROUT
1795 uext 1 108 0 A1_reg
1796 uext 47 957 0 A2A1
1797 uext 1 264 0 A2_reg
1798 uext 104 268 0 ACASCREG_BIN
1799 uext 3 4 0 ACASCREG_REG
1800 uext 1 5 0 ACIN_in
1801 uext 25 1141 0 ADREG_BIN
1802 uext 25 1142 0 ADREG_INT
1803 uext 3 6 0 ADREG_REG
1804 uext 47 1143 0 AD_DATA
1805 uext 47 1140 0 AD_DATA_reg
1806 uext 47 1133 0 AD_in
1807 uext 25 405 0 ALUMODE10_in
1808 uext 25 1424 0 ALUMODE10_reg
1809 uext 25 401 0 ALUMODEREG_BIN
1810 uext 3 9 0 ALUMODEREG_REG
1811 uext 7 402 0 ALUMODE_DATA
1812 uext 7 393 0 ALUMODE_in
1813 uext 7 400 0 ALUMODE_reg
1814 uext 23 1641 0 ALU_OUT_in
1815 uext 23 538 0 ALU_OUT_reg
1816 uext 25 1400 0 AMULT26_in
1817 uext 25 1080 0 AMULTSEL_BIN
1818 uext 221 1077 0 AMULTSEL_REG
1819 uext 104 265 0 AREG_BIN
1820 uext 3 12 0 AREG_REG
1821 uext 10 676 2
1822 eq 25 13 1821
1823 ite 104 1822 106 406
1824 uext 10 679 2
1825 eq 25 13 1824
1826 ite 104 1825 410 1823
1827 uext 10 637 3
1828 eq 25 13 1827
1829 ite 104 1828 406 1826
1830 uext 104 1829 0 AUTORESET_PATDET_BIN
1831 sort bitvec 120
1832 sort bitvec 115
1833 const 1832 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1834 concat 1831 1833 13
1835 uext 1831 1834 0 AUTORESET_PATDET_REG
1836 const 10 10000
1837 eq 25 14 1836
1838 ite 25 1837 98 248
1839 uext 10 1413 2
1840 eq 25 14 1839
1841 ite 25 1840 248 1838
1842 uext 25 1841 0 AUTORESET_PRIORITY_BIN
1843 const 491 00000000000000000000000000000000000
1844 concat 506 1843 14
1845 uext 506 1844 0 AUTORESET_PRIORITY_REG
1846 uext 1 267 0 A_ALU
1847 uext 25 256 0 A_INPUT_BIN
1848 sort bitvec 56
1849 sort bitvec 51
1850 const 1849 000000000000000000000000000000000000000000000000000
1851 concat 1848 1850 15
1852 uext 1848 1851 0 A_INPUT_REG
1853 uext 1 247 0 A_in
1854 uext 16 278 0 B1_DATA_out
1855 uext 16 1110 0 B2B1
1856 uext 16 366 0 B2_DATA
1857 uext 16 363 0 B2_reg
1858 uext 104 367 0 BCASCREG_BIN
1859 uext 3 18 0 BCASCREG_REG
1860 uext 16 19 0 BCIN_in
1861 uext 25 1401 0 BMULT17_in
1862 uext 25 1087 0 BMULTSEL_BIN
1863 concat 221 1076 20
1864 uext 221 1863 0 BMULTSEL_REG
1865 uext 104 364 0 BREG_BIN
1866 uext 3 21 0 BREG_REG
1867 uext 16 366 0 B_ALU
1868 uext 25 355 0 B_INPUT_BIN
1869 concat 1848 1850 22
1870 uext 1848 1869 0 B_INPUT_REG
1871 uext 16 349 0 B_in
1872 uext 25 26 0 CARRYCASCIN_in
1873 uext 25 1459 0 CARRYINREG_BIN
1874 uext 3 28 0 CARRYINREG_REG
1875 uext 25 1396 0 CARRYINSELREG_BIN
1876 uext 3 31 0 CARRYINSELREG_REG
1877 uext 29 1388 0 CARRYINSEL_in
1878 uext 29 1397 0 CARRYINSEL_mux
1879 uext 29 1395 0 CARRYINSEL_reg
1880 uext 25 1451 0 CARRYIN_in
1881 uext 25 1460 0 CARRYIN_mux
1882 uext 25 1458 0 CARRYIN_reg
1883 uext 25 1433 0 CCOUT_in
1884 neq 25 32 98
1885 and 25 1884 32
1886 uext 25 1885 0 CEA1_in
1887 neq 25 33 98
1888 and 25 1887 33
1889 uext 25 1888 0 CEA2_in
1890 neq 25 34 98
1891 and 25 1890 34
1892 uext 25 1891 0 CEAD_in
1893 neq 25 35 98
1894 and 25 1893 35
1895 uext 25 1894 0 CEALUMODE_in
1896 neq 25 36 98
1897 and 25 1896 36
1898 uext 25 1897 0 CEB1_in
1899 neq 25 37 98
1900 and 25 1899 37
1901 uext 25 1900 0 CEB2_in
1902 neq 25 39 98
1903 and 25 1902 39
1904 uext 25 1903 0 CECARRYIN_in
1905 neq 25 40 98
1906 and 25 1905 40
1907 uext 25 1906 0 CECTRL_in
1908 neq 25 38 98
1909 and 25 1908 38
1910 uext 25 1909 0 CEC_in
1911 neq 25 41 98
1912 and 25 1911 41
1913 uext 25 1912 0 CED_in
1914 uext 25 42 0 CEINMODE_in
1915 neq 25 43 98
1916 and 25 1915 43
1917 uext 25 1916 0 CEM_in
1918 neq 25 44 98
1919 and 25 1918 44
1920 uext 25 1919 0 CEP_in
1921 uext 25 103 0 CLK_in
1922 uext 7 1518 0 COUT_in
1923 uext 7 1431 0 COUT_reg
1924 uext 25 884 0 CREG_BIN
1925 uext 3 46 0 CREG_REG
1926 uext 23 885 0 C_DATA_in
1927 uext 23 876 0 C_in
1928 uext 23 883 0 C_reg
1929 uext 25 1072 0 DREG_BIN
1930 uext 25 1102 0 DREG_INT
1931 uext 3 49 0 DREG_REG
1932 uext 47 1103 0 D_DATA
1933 uext 47 1105 0 D_DATA_mux
1934 uext 47 1071 0 D_DATA_reg
1935 uext 47 1064 0 D_in
1936 uext 25 943 0 INMODEREG_BIN
1937 uext 3 51 0 INMODEREG_REG
1938 uext 10 935 0 INMODE_in
1939 uext 10 944 0 INMODE_mux
1940 uext 10 942 0 INMODE_reg
1941 uext 7 52 0 IS_ALUMODE_INVERTED_REG
1942 uext 25 53 0 IS_CARRYIN_INVERTED_REG
1943 uext 25 54 0 IS_CLK_INVERTED_REG
1944 uext 10 55 0 IS_INMODE_INVERTED_REG
1945 uext 56 57 0 IS_OPMODE_INVERTED_REG
1946 uext 25 58 0 IS_RSTALLCARRYIN_INVERTED_REG
1947 uext 25 59 0 IS_RSTALUMODE_INVERTED_REG
1948 uext 25 60 0 IS_RSTA_INVERTED_REG
1949 uext 25 61 0 IS_RSTB_INVERTED_REG
1950 uext 25 62 0 IS_RSTCTRL_INVERTED_REG
1951 uext 25 63 0 IS_RSTC_INVERTED_REG
1952 uext 25 64 0 IS_RSTD_INVERTED_REG
1953 uext 25 65 0 IS_RSTINMODE_INVERTED_REG
1954 uext 25 66 0 IS_RSTM_INVERTED_REG
1955 uext 25 67 0 IS_RSTP_INVERTED_REG
1956 uext 23 68 0 MASK_REG
1957 uext 25 1252 0 MREG_BIN
1958 uext 3 69 0 MREG_REG
1959 uext 25 70 0 MULTSIGNIN_in
1960 uext 25 1521 0 MULTSIGN_ALU_in
1961 uext 25 1528 0 MULTSIGN_ALU_reg
1962 uext 25 634 0 OPMODEREG_BIN
1963 uext 3 72 0 OPMODEREG_REG
1964 uext 56 626 0 OPMODE_in
1965 uext 56 635 0 OPMODE_mux
1966 uext 56 633 0 OPMODE_reg
1967 uext 23 73 0 PATTERN_REG
1968 uext 23 74 0 PCIN_in
1969 uext 25 953 0 PREADDINSEL_BIN
1970 uext 75 76 0 PREADDINSEL_REG
1971 uext 47 1129 0 PREADD_AB
1972 uext 25 1489 0 PREG_BIN
1973 uext 3 77 0 PREG_REG
1974 uext 25 1376 0 P_FDBK_47_in
1975 uext 23 538 0 P_FDBK_in
1976 uext 23 78 0 RND_REG
1977 neq 25 80 98
1978 xor 25 80 58
1979 and 25 1977 1978
1980 uext 25 1979 0 RSTALLCARRYIN_in
1981 neq 25 81 98
1982 xor 25 81 59
1983 and 25 1981 1982
1984 uext 25 1983 0 RSTALUMODE_in
1985 neq 25 79 98
1986 xor 25 79 60
1987 and 25 1985 1986
1988 uext 25 1987 0 RSTA_in
1989 neq 25 82 98
1990 xor 25 82 61
1991 and 25 1989 1990
1992 uext 25 1991 0 RSTB_in
1993 neq 25 84 98
1994 xor 25 84 62
1995 and 25 1993 1994
1996 uext 25 1995 0 RSTCTRL_in
1997 neq 25 83 98
1998 xor 25 83 63
1999 and 25 1997 1998
2000 uext 25 1999 0 RSTC_in
2001 neq 25 85 98
2002 xor 25 85 64
2003 and 25 2001 2002
2004 uext 25 2003 0 RSTD_in
2005 neq 25 86 98
2006 xor 25 86 65
2007 and 25 2005 2006
2008 uext 25 2007 0 RSTINMODE_in
2009 neq 25 87 98
2010 xor 25 87 66
2011 and 25 2009 2010
2012 uext 25 2011 0 RSTM_in
2013 neq 25 88 98
2014 xor 25 88 67
2015 and 25 2013 2014
2016 uext 25 2015 0 RSTP_in
2017 uext 104 1658 0 SEL_MASK_BIN
2018 sort bitvec 112
2019 sort bitvec 107
2020 const 2019 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2021 concat 2018 2020 89
2022 uext 2018 2021 0 SEL_MASK_REG
2023 uext 25 1537 0 SEL_PATTERN_BIN
2024 concat 1848 1850 90
2025 uext 1848 2024 0 SEL_PATTERN_REG
2026 uext 104 1099 0 USE_MULT_BIN
2027 sort bitvec 64
2028 sort bitvec 59
2029 const 2028 00000000000000000000000000000000000000000000000000000000000
2030 concat 2027 2029 91
2031 uext 2027 2030 0 USE_MULT_REG
2032 uext 25 1675 0 USE_PATTERN_DETECT_BIN
2033 sort bitvec 72
2034 sort bitvec 67
2035 const 2034 0000000000000000000000000000000000000000000000000000000000000000000
2036 concat 2033 2035 92
2037 uext 2033 2036 0 USE_PATTERN_DETECT_REG
2038 uext 104 417 0 USE_SIMD_BIN
2039 const 515 0000000000000000000000000000000000000000000
2040 concat 23 2039 93
2041 uext 23 2040 0 USE_SIMD_REG
2042 uext 25 1735 0 USE_WIDEXOR_BIN
2043 concat 506 1843 94
2044 uext 506 2043 0 USE_WIDEXOR_REG
2045 uext 521 1253 0 U_DATA
2046 uext 521 1256 0 U_DATA_in
2047 uext 521 1251 0 U_DATA_reg
2048 uext 518 1243 0 U_in
2049 uext 521 1293 0 V_DATA
2050 uext 521 1294 0 V_DATA_in
2051 uext 521 1292 0 V_DATA_reg
2052 uext 521 1285 0 V_in
2053 uext 25 1747 0 XORSIMD_BIN
2054 sort bitvec 88
2055 sort bitvec 83
2056 const 2055 00000000000000000000000000000000000000000000000000000000000000000000000000000000000
2057 concat 2054 2056 95
2058 uext 2054 2057 0 XORSIMD_REG
2059 uext 75 1785 0 XOR_MX_in
2060 uext 75 1792 0 XOR_MX_reg
2061 sort bitvec 49
2062 concat 2061 1346 1467
2063 uext 2061 2062 0 a_int
2064 uext 47 1144 0 a_mult_mux
2065 not 25 1841
2066 or 25 2065 1919
2067 uext 25 2066 0 auto_reset_pri
2068 uext 16 1182 0 b_mult_mux
2069 uext 25 1403 0 c_mult
2070 uext 25 1916 0 ce_m_g
2071 uext 25 1467 0 cin
2072 uext 25 1464 0 cin_b
2073 uext 23 1308 0 co
2074 uext 25 1368 0 co12_lsb
2075 uext 25 1360 0 co24_lsb
2076 uext 25 1348 0 co36_lsb
2077 uext 23 1312 0 comux
2078 slice 211 1312 10 0
2079 concat 213 1314 2078
2080 slice 211 1312 22 12
2081 concat 234 2080 2079
2082 concat 236 1316 2081
2083 slice 211 1312 34 24
2084 concat 491 2083 2082
2085 concat 494 1318 2084
2086 slice 213 1312 47 36
2087 concat 23 2086 2085
2088 uext 23 2087 0 comux4simd
2089 uext 23 1346 0 comux_w
2090 uext 25 1494 0 cout0
2091 uext 25 1507 0 cout1
2092 uext 25 1513 0 cout2
2093 uext 25 1487 0 cout3
2094 uext 25 1521 0 cout4
2095 uext 25 1501 0 cout_0
2096 uext 25 1508 0 cout_1
2097 uext 25 1514 0 cout_2
2098 uext 25 1487 0 cout_3
2099 ite 25 1916 1403 1410
2100 uext 25 2099 0 d_carryin_int
2101 ite 25 1979 248 2099
2102 uext 25 2101 0 dr_carryin_int
2103 uext 25 248 0 glblGSR
2104 uext 25 1475 0 intc1
2105 uext 25 1479 0 intc2
2106 uext 25 1483 0 intc3
2107 uext 521 1239 0 mult
2108 uext 25 1500 0 mult_or_logic
2109 uext 25 1411 0 multcarryin_data
2110 uext 25 98 0 opmode_valid_flag_dou
2111 uext 25 1707 0 overflow_data
2112 uext 25 1678 0 pdet_o
2113 uext 25 1686 0 pdet_o_mux
2114 uext 25 1685 0 pdet_o_reg1
2115 uext 25 1706 0 pdet_o_reg2
2116 uext 25 1689 0 pdetb_o
2117 uext 25 1697 0 pdetb_o_mux
2118 uext 25 1696 0 pdetb_o_reg1
2119 uext 25 1722 0 pdetb_o_reg2
2120 const 518 01010101010101010101010101010101010101010101
2121 uext 518 2120 0 ps_u_mask
2122 uext 518 1281 0 ps_v_mask
2123 uext 25 1410 0 qmultcarryin
2124 uext 25 1979 0 rst_carryin_g
2125 uext 23 1303 0 s
2126 uext 215 1473 0 s0
2127 uext 215 1477 0 s1
2128 uext 215 1481 0 s2
2129 uext 217 1485 0 s3
2130 uext 23 1310 0 smux
2131 uext 23 1353 0 smux_w
2132 and 25 2066 1707
2133 and 25 2132 1687
2134 eq 25 1829 106
2135 ite 25 2134 2133 248
2136 and 25 2066 1686
2137 uext 104 98 1
2138 eq 25 1829 2137
2139 ite 25 2138 2136 2135
2140 uext 25 2139 0 the_auto_reset_patdet
2141 uext 23 1676 0 the_mask
2142 uext 23 1538 0 the_pattern
2143 uext 25 1723 0 underflow_data
2144 uext 23 1342 0 wmux
2145 uext 104 1267 0 x_mac_cascd
2146 uext 23 1272 0 xmux
2147 uext 25 1736 0 xor_12a
2148 uext 25 1739 0 xor_12b
2149 uext 25 1751 0 xor_12c
2150 uext 25 1754 0 xor_12d
2151 uext 25 1761 0 xor_12e
2152 uext 25 1764 0 xor_12f
2153 uext 25 1768 0 xor_12g
2154 uext 25 1771 0 xor_12h
2155 uext 25 1740 0 xor_24a
2156 uext 25 1755 0 xor_24b
2157 uext 25 1765 0 xor_24c
2158 uext 25 1772 0 xor_24d
2159 uext 25 1756 0 xor_48a
2160 uext 25 1773 0 xor_48b
2161 uext 25 1774 0 xor_96
2162 uext 23 1302 0 ymux
2163 uext 23 896 0 z_optinv
2164 uext 23 895 0 zmux
2165 next 1 96 108
2166 ite 1 1885 257 108
2167 const 1 000000000000000000000000000000
2168 redor 25 265
2169 not 25 2168
2170 or 25 1987 2169
2171 ite 1 2170 2167 2166
2172 next 1 97 2171
2173 next 25 99 103
2174 next 1 258 264
2175 eq 25 265 106
2176 ite 1 2175 108 257
2177 ite 1 1888 2176 264
2178 ite 1 2170 2167 2177
2179 next 1 259 2178
2180 next 25 260 103
2181 next 16 272 278
2182 ite 16 1897 356 278
2183 redor 25 364
2184 not 25 2183
2185 or 25 1991 2184
2186 ite 16 2185 1108 2182
2187 next 16 273 2186
2188 next 25 274 103
2189 next 16 357 363
2190 eq 25 364 106
2191 ite 16 2190 278 356
2192 ite 16 1900 2191 363
2193 ite 16 1991 1108 2192
2194 next 16 358 2193
2195 next 25 359 103
2196 next 7 394 400
2197 ite 7 1894 393 400
2198 const 7 0000
2199 ite 7 1983 2198 2197
2200 next 7 395 2199
2201 next 25 396 103
2202 next 23 532 538
2203 and 25 1919 1489
2204 ite 23 2203 1641 538
2205 or 25 2015 2139
2206 ite 23 2205 892 2204
2207 next 23 533 2206
2208 next 25 534 103
2209 next 56 627 633
2210 ite 56 1906 626 633
2211 const 56 000000000
2212 ite 56 1995 2211 2210
2213 next 56 628 2212
2214 next 25 629 103
2215 next 23 877 883
2216 ite 23 1909 876 883
2217 not 25 884
2218 or 25 1999 2217
2219 ite 23 2218 892 2216
2220 next 23 878 2219
2221 next 25 879 103
2222 next 10 936 942
2223 ite 10 42 935 942
2224 const 10 00000
2225 not 25 943
2226 or 25 2007 2225
2227 ite 10 2226 2224 2223
2228 next 10 937 2227
2229 next 25 938 103
2230 next 47 1065 1071
2231 ite 47 1912 1064 1071
2232 not 25 1102
2233 or 25 2003 2232
2234 ite 47 2233 947 2231
2235 next 47 1066 2234
2236 next 25 1067 103
2237 next 47 1134 1140
2238 ite 47 1891 1133 1140
2239 ite 47 2003 947 2238
2240 next 47 1135 2239
2241 next 25 1136 103
2242 next 521 1245 1251
2243 ite 521 1916 1244 1251
2244 not 25 1252
2245 or 25 2011 2244
2246 ite 521 2245 1238 2243
2247 next 521 1246 2246
2248 next 25 1247 103
2249 next 521 1286 1292
2250 ite 521 1916 1285 1292
2251 ite 521 2245 1238 2250
2252 next 521 1287 2251
2253 next 25 1288 103
2254 next 29 1389 1395
2255 ite 29 1906 1388 1395
2256 ite 29 1995 1295 2255
2257 next 29 1390 2256
2258 next 25 1391 103
2259 next 25 1404 1410
2260 next 25 1405 2101
2261 next 25 1406 103
2262 next 25 1418 1424
2263 ite 25 2203 405 1424
2264 ite 25 2205 248 2263
2265 next 25 1419 2264
2266 next 25 1420 103
2267 next 7 1425 1431
2268 ite 7 2203 1518 1431
2269 ite 7 2205 2198 2268
2270 next 7 1426 2269
2271 next 25 1427 103
2272 next 25 1452 1458
2273 ite 25 1903 1451 1458
2274 ite 25 1979 248 2273
2275 next 25 1453 2274
2276 next 25 1454 103
2277 next 25 1522 1528
2278 ite 25 2203 1521 1528
2279 ite 25 2205 248 2278
2280 next 25 1523 2279
2281 next 25 1524 103
2282 next 25 1679 1685
2283 ite 25 2203 1678 1685
2284 ite 25 2205 248 2283
2285 next 25 1680 2284
2286 next 25 1681 103
2287 next 25 1690 1696
2288 ite 25 2203 1689 1696
2289 ite 25 2205 248 2288
2290 next 25 1691 2289
2291 next 25 1692 103
2292 next 25 1700 1706
2293 ite 25 2203 1685 1706
2294 ite 25 2205 248 2293
2295 next 25 1701 2294
2296 next 25 1702 103
2297 next 25 1716 1722
2298 ite 25 2203 1696 1722
2299 ite 25 2205 248 2298
2300 next 25 1717 2299
2301 next 25 1718 103
2302 next 75 1786 1792
2303 ite 75 2203 1785 1792
2304 const 75 00000000
2305 ite 75 2205 2304 2303
2306 next 75 1787 2305
2307 next 25 1788 103
here-string-delimiter
        ;
        ))

     ;;; Generate a full dictionary of inputs.
     (define/contract
      (generate-inputs input-types default-value inputs)
      (-> any/c
          (or/c integer? 'symbolic)
          (hash/c symbol? (or/c signal? bv? integer? 'symbolic))
          hash?)
      ;;; Initialize defaults.
      (make-immutable-hash
       (append
        ;;; Initialize all values to a default value.
        (map (lambda (key)
               (cons key
                     (match default-value
                       [(? integer?) (bv->signal (bv default-value (hash-ref input-types key)))]
                       ;;(define-symbolic* default-symbolic-input (hash-ref input-types key))
                       ['symbolic (bv->signal (constant key (hash-ref input-types key)))])))
             (hash-keys input-types))
        ;;; Overwrite defaults with user-specified values.
        (map (λ (key)
               (cons key
                     (match (hash-ref inputs key)
                       [(? integer? v) (bv->signal (bv v (hash-ref input-types key)))]
                       [(? bv? v) (bv->signal v)]
                       [(? signal? v) v]
                       ;;(define-symbolic* symbolic-input (hash-ref input-types key))
                       ['symbolic (bv->signal (constant key (hash-ref input-types key)))])))
             (hash-keys inputs)))))

     (define inputs
       (generate-inputs input-types
                        'symbolic
                        (hash ;;; 'A
                         ;;; 'symbolic
                         ;;; 'B
                         ;;; 'symbolic
                         ;;; 'AMULTSEL
                         ;;; 0
                         ;;; 'A_INPUT
                         ;;; 7
                         ;;; 'BMULTSEL
                         ;;; 1
                         ;;; 'B_INPUT
                         ;;; 7
                         ;;; 'PREADDINSEL
                         ;;; 0
                         ;;; 'RND
                         ;;; (bv 0 48)
                         ;;; 'USE_MULT
                         ;;; 10
                         ;;; 'USE_SIMD
                         ;;; 12
                         ;;; 'USE_WIDEXOR
                         ;;; 13
                         ;;; 'XORSIMD
                         ;;; 14
                         ;;; 'AUTORESET_PATDET
                         ;;; 3
                         ;;; 'AUTORESET_PRIORITY
                         ;;; 6
                         ;;; 'MASK
                         ;;; (bv #x3fffffffffff 48)
                         ;;; 'PATTERN
                         ;;; (bv 0 48)
                         ;;; 'SEL_MASK
                         ;;; 8
                         ;;; 'SEL_PATTERN
                         ;;; 9
                         ;;; 'USE_PATTERN_DETECT
                         ;;; 11
                         ;;; 'IS_ALUMODE_INVERTED
                         ;;; (bv 0 4)
                         ;;; 'IS_CARRYIN_INVERTED
                         ;;; (bv 0 1)
                         ;;; 'IS_CLK_INVERTED
                         ;;; (bv 0 1)
                         ;;; 'IS_INMODE_INVERTED
                         ;;; (bv 0 5)
                         ;;; 'IS_OPMODE_INVERTED
                         ;;; (bv 0 9)
                         ;;; 'IS_RSTALLCARRYIN_INVERTED
                         ;;; (bv 0 1)
                         ;;; 'IS_RSTALUMODE_INVERTED
                         ;;; (bv 0 1)
                         ;;; 'IS_RSTA_INVERTED
                         ;;; (bv 0 1)
                         ;;; 'IS_RSTB_INVERTED
                         ;;; (bv 0 1)
                         ;;; 'IS_RSTCTRL_INVERTED
                         ;;; (bv 0 1)
                         ;;; 'IS_RSTC_INVERTED
                         ;;; (bv 0 1)
                         ;;; 'IS_RSTD_INVERTED
                         ;;; (bv 0 1)
                         ;;; 'IS_RSTINMODE_INVERTED
                         ;;; (bv 0 1)
                         ;;; 'IS_RSTM_INVERTED
                         ;;; (bv 0 1)
                         ;;; 'IS_RSTP_INVERTED
                         ;;; (bv 0 1)
                         ;;; 'ACASCREG
                         ;;; 0
                         ;;; 'ADREG
                         ;;; 0
                         ;;; 'ALUMODEREG
                         ;;; 0
                         ;;; 'AREG
                         ;;; 0
                         ;;; 'BCASCREG
                         ;;; 0
                         ;;; 'BREG
                         ;;; 0
                         ;;; 'CARRYINREG
                         ;;; 0
                         ;;; 'CARRYINSELREG
                         ;;; 0
                         ;;; 'CREG
                         ;;; 0
                         ;;; 'DREG
                         ;;; 0
                         ;;; 'INMODEREG
                         ;;; 0
                         ;;; 'MREG
                         ;;; 0
                         ;;; 'OPMODEREG
                         ;;; 0
                         ;;; 'PREG
                         ;;; 0
                         ;;; 'unnamed-input-1274
                         ;;; 0
                         ;;; 'unnamed-input-1331
                         ;;; 0
                         ;;; 'unnamed-input-1375
                         ;;; 0
                         ;;; 'unnamed-input-531
                         ;;; 0
                         ;;; 'unnamed-input-897
                         ;;; 0
                         ;;; 'RSTA
                         ;;; 0
                         ;;; 'RSTALLCARRYIN
                         ;;; 0
                         ;;; 'RSTALLCARRYIN
                         ;;; 0
                         ;;; 'RSTM
                         ;;; 0
                         ;;; 'RSTP
                         ;;; 0
                         'ACIN
                         0
                         ;;; 'ADREG
                         ;;; 0
                         ;;; 'ALUMODE
                         ;;; 0
                         ;;; 'ALUMODEREG
                         ;;; 0
                         'BCIN
                         0
                         'C
                         0
                         ;;; 'CARRYCASCIN
                         ;;; 0
                         ;;; 'CARRYIN
                         ;;; 0
                         ;;; 'CARRYINREG
                         ;;; 0
                         ;;; Setting carryinsel to 0 will make everything 0! Why?
                         ;;; It may also just be because it's the last signal I uncommented?
                         ;;; 'CARRYINSEL
                         ;;; 0
                         ;;; 'CARRYINSELREG
                         ;;; 0
                         ;;; 'CEA1
                         ;;; 1
                         ;;; 'CEA2
                         ;;; 1
                         ;;; 'CEAD
                         ;;; 1
                         ;;; 'CEALUMODE
                         ;;; 1
                         ;;; 'CEB1
                         ;;; 1
                         ;;; 'CEB2
                         ;;; 1
                         ;;; 'CEC
                         ;;; 1
                         ;;; 'CECARRYIN
                         ;;; 1
                         ;;; 'CECTRL
                         ;;; 1
                         ;;; 'CED
                         ;;; 1
                         ;;; 'CEINMODE
                         ;;; 1
                         ;;; 'CEM
                         ;;; 1
                         ;;; 'CEP
                         ;;; 1
                         ;;; 'CLK
                         ;;; 0
                         ;;; 'CREG
                         ;;; 0
                         'D
                         0
                         ;;; 'DREG
                         ;;; 0
                         ;;; 'INMODE
                         ;;; 0
                         ;;; 'INMODEREG
                         ;;; 0
                         ;;; 'IS_ALUMODE_INVERTED
                         ;;; 0
                         ;;; 'IS_CARRYIN_INVERTED
                         ;;; 0
                         ;;; 'IS_CLK_INVERTED
                         ;;; 0
                         ;;; 'IS_INMODE_INVERTED
                         ;;; 0
                         ;;; 'IS_OPMODE_INVERTED
                         ;;; 0
                         ;;; 'IS_RSTALLCARRYIN_INVERTED
                         ;;; 0
                         ;;; 'IS_RSTALUMODE_INVERTED
                         ;;; 0
                         ;;; 'IS_RSTA_INVERTED
                         ;;; 0
                         ;;; 'IS_RSTB_INVERTED
                         ;;; 0
                         ;;; 'IS_RSTCTRL_INVERTED
                         ;;; 0
                         ;;; 'IS_RSTC_INVERTED
                         ;;; 0
                         ;;; 'IS_RSTD_INVERTED
                         ;;; 0
                         ;;; 'IS_RSTINMODE_INVERTED
                         ;;; 0
                         ;;; 'IS_RSTM_INVERTED
                         ;;; 0
                         ;;; 'IS_RSTP_INVERTED
                         ;;; 0
                         ;;; 'MASK
                         ;;; (bv #x3fffffffffff 48)
                         ;;; 'MREG
                         ;;; 0
                         ;;; 'MULTSIGNIN
                         ;;; 0
                         ;;; 'OPMODE
                         ;;; (bv #b000000101 9)
                         ;;; 'OPMODEREG
                         ;;; 0
                         ;;; 'PATTERN
                         ;;; 0
                         ;;; 'PCIN
                         ;;; 0
                         ;;; 'PREADDINSEL
                         ;;; 0
                         ;;; 'PREG
                         ;;; 0
                         ;;; 'RND
                         ;;; 0
                         ;;; 'RSTA
                         ;;; 0
                         ;;; 'RSTALLCARRYIN
                         ;;; 0
                         ;;; 'RSTALUMODE
                         ;;; 0
                         ;;; 'RSTB
                         ;;; 0
                         ;;; 'RSTC
                         ;;; 0
                         ;;; 'RSTCTRL
                         ;;; 0
                         ;;; 'RSTD
                         ;;; 0
                         ;;; 'RSTINMODE
                         ;;; 0
                         ;;; 'RSTM
                         ;;; 0
                         ;;; 'RSTP
                         ;;; 0
                         ;;; 'unnamed-input-1274
                         ;;; 0
                         ;;; 'unnamed-input-1331
                         ;;; 0
                         ;;; 'unnamed-input-1375
                         ;;; 0
                         ;;; 'unnamed-input-531
                         ;;; 0
                         ;;; 'unnamed-input-897
                         ;;; 0
                         )))
     (define A (signal-value (hash-ref inputs 'A)))
     (define B (signal-value (hash-ref inputs 'B)))
     (define soln
       (synthesize #:forall (list A
                                  B
                                  ;;; Note: we also need to include the unnamed inputs, as we don't
                                  ;;; have control over them. I have no idea what they are or where
                                  ;;; they come from, so we have to just assume they can take any
                                  ;;; value.
                                  (hash-ref inputs 'unnamed-input-1274)
                                  (hash-ref inputs 'unnamed-input-1331)
                                  (hash-ref inputs 'unnamed-input-1375)
                                  (hash-ref inputs 'unnamed-input-531)
                                  (hash-ref inputs 'unnamed-input-897))
                   #:guarantee (begin
                                 ;;; The DSP does signed multiplication, while we only care about
                                 ;;; unsigned, for now. To emulate unsigned multiplication, we can
                                 ;;; keep the inputs under a certain size. Also, the DSP does 27x18
                                 ;;; bit multiplication, even though the A input is 30 bits.
                                 (assume (bvule A (bv (- (expt 2 26) 1) 30)))
                                 (assume (bvule B (bv (- (expt 2 17) 1) 18)))
                                 (assert (bveq (bvmul (zero-extend A (bitvector 48))
                                                      (zero-extend B (bitvector 48)))
                                               (signal-value (new-interpreter P inputs init)))))))

     (check-true (sat? soln)))))
